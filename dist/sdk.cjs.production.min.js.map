{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/chains.ts","../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/pools/pool.ts","../src/entities/pools/pair.ts","../src/entities/pools/vault.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["export enum ChainId {\n  FUJI = 43113,\n  AVALANCHE = 43114,\n  WAGMI = 11111,\n  COSTON = 16,\n  SONGBIRD = 19,\n  NEAR_MAINNET = 329847900,\n  NEAR_TESTNET = 329847901\n}\n\nexport enum StakingType {\n  LEGACY = 'LEGACY',\n  SAR_POSITIONS = 'SAR_POSITIONS',\n  NEAR_STAKING = 'NEAR_STAKING'\n}\n\ninterface StakingContract {\n  address: string\n  active: boolean\n  reward_token: string\n  type: StakingType\n}\n\nexport enum AirdropType {\n  LEGACY = 'LEGACY',\n  MERKLE = 'MERKLE',\n  MERKLE_TO_STAKING = 'MERKLE_TO_STAKING',\n  NEAR_AIRDROP = 'NEAR_AIRDROP'\n}\n\ninterface AirdropContract {\n  address: string\n  active: boolean\n  type: AirdropType\n}\n\nexport enum ChefType {\n  MINI_CHEF = 'MINI_CHEF',\n  MINI_CHEF_V2 = 'MINI_CHEF_V2',\n  PANGO_CHEF = 'PANGO_CHEF',\n  NEAR_CHEF = 'NEAR_CHEF'\n}\n\ninterface ChefContract {\n  address: string\n  active: boolean\n  type: ChefType\n}\n\nexport interface Chain {\n  id: string\n  name: string\n  chain_id?: number\n  mainnet: boolean\n  evm: boolean\n  pangolin_is_live: boolean\n  tracked_by_debank: boolean\n  supported_by_gelato: boolean\n  rpc_uri: string\n  subgraph?: {\n    exchange: string\n  }\n  symbol: string\n  nativeCurrency: {\n    name: string\n    symbol: string\n    decimals: number\n  }\n  blockExplorerUrls?: string[]\n  png_symbol?: string\n  logo?: string\n  coingecko_id?: string\n  debank_pangolin_id?: string\n  contracts?: {\n    png: string\n    factory: string\n    router: string\n    router_daas?: string\n    wrapped_native_token: string\n    local_multisig?: string\n    community_treasury?: string\n    treasury_vester?: string\n    mini_chef?: ChefContract\n    timelock?: string\n    migrator?: string\n    airdrop?: AirdropContract\n    foundation_multisig?: string\n    joint_multisig?: string\n    revenue_distributor?: string\n    governor?: string\n    fee_collector?: string\n    multicall: string\n    staking?: StakingContract[]\n  }\n}\n\nexport const ETHEREUM_MAINNET: Chain = {\n  id: 'ethereum_mainnet',\n  chain_id: 1,\n  name: 'Ethereum',\n  symbol: 'ETH',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/eth.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\n  coingecko_id: 'ethereum',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://etherscan.io']\n}\n\nexport const ARBITRUM_MAINNET: Chain = {\n  id: 'arbitrum_mainnet',\n  chain_id: 42161,\n  name: 'Arbitrum',\n  symbol: 'ARB',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/arb.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://arb1.arbitrum.io/rpc',\n  coingecko_id: 'arbitrum-one',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://arbiscan.io']\n}\n\nexport const ARBITRUM_RINKEBY: Chain = {\n  id: 'arbitrum_rinkeby',\n  chain_id: 421611,\n  name: 'Arbitrum Rinkbey',\n  symbol: 'ARB',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/arb.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rinkeby.arbitrum.io/rpc',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://rinkeby-explorer.arbitrum.io']\n}\n\nexport const AURORA_MAINNET: Chain = {\n  id: 'aurora_mainnet',\n  chain_id: 1313161554,\n  name: 'Aurora',\n  symbol: 'AURORA',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/aurora.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.aurora.dev',\n  coingecko_id: 'aurora',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://aurorascan.dev']\n}\n\nexport const AURORA_TESTNET: Chain = {\n  id: 'aurora_testnet',\n  chain_id: 1313161555,\n  name: 'Aurora Testnet',\n  symbol: 'AURORA',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/aurora.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.aurora.dev',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.aurorascan.dev']\n}\n\nexport const AVALANCHE_MAINNET: Chain = {\n  id: 'avalanche_mainnet',\n  chain_id: 43114,\n  name: 'Avalanche',\n  symbol: 'AVAX',\n  png_symbol: 'PNG',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/avax.png',\n  pangolin_is_live: true,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://api.avax.network/ext/bc/C/rpc',\n  subgraph: {\n    exchange: 'https://api.thegraph.com/subgraphs/name/pangolindex/exchange'\n  },\n  coingecko_id: 'avalanche',\n  debank_pangolin_id: 'avax_pangolin',\n  contracts: {\n    png: '0x60781C2586D68229fde47564546784ab3fACA982',\n    factory: '0xefa94DE7a4656D787667C749f7E1223D71E9FD88',\n    router: '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106',\n    router_daas: '0xEfd958c7C68b7e6a88300E039cAE275ca741007F',\n    wrapped_native_token: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    local_multisig: '0x66c048d27aFB5EE59E4C07101A483654246A4eda',\n    community_treasury: '0x650f5865541f6D68BdDFE977dB933C293EA72358',\n    treasury_vester: '0x6747AC215dAFfeE03a42F49FebB6ab448E12acEe',\n    mini_chef: {\n      address: '0x1f806f7C8dED893fd3caE279191ad7Aa3798E928',\n      active: true,\n      type: ChefType.MINI_CHEF_V2\n    },\n    airdrop: {\n      address: '0x0C58C2041da4CfCcF5818Bbe3b66DBC23B3902d9',\n      active: false,\n      type: AirdropType.LEGACY\n    },\n    timelock: '0xEB5c91bE6Dbfd30cf616127C2EA823C64e4b1ff8',\n    governor: '0xb0Ff2b1047d9E8d294c2eD798faE3fA817F43Ee1',\n    migrator: '0x4b23Aa72A1214d0E4fd3f2c8Da7C6ba660F7483C',\n    multicall: '0x0FB54156B496b5a040b51A71817aED9e2927912E',\n    staking: [\n      {\n        address: '0x88afdaE1a9F58Da3E68584421937E5F564A0135b',\n        active: true,\n        reward_token: '0x60781C2586D68229fde47564546784ab3fACA982',\n        type: StakingType.LEGACY\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'Avalanche',\n    symbol: 'AVAX',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://snowtrace.io']\n}\n\nexport const AVALANCHE_FUJI: Chain = {\n  id: 'avalanche_fuji',\n  chain_id: 43113,\n  name: 'Avalanche Fuji',\n  symbol: 'AVAX',\n  png_symbol: 'fujiPNG',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/avax.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://api.avax-test.network/ext/bc/C/rpc',\n  contracts: {\n    png: '0xAF5D473b3f8F96A5B21c6bbB97e09b491335acb9',\n    factory: '0x2a496ec9e9bE22e66C61d4Eb9d316beaEE31A77b',\n    router: '0x688d21b0B8Dc35971AF58cFF1F7Bf65639937860',\n    router_daas: '0xFE97f59B72eEE0F29F93e12195C6F35DCdAB6899',\n    wrapped_native_token: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    timelock: '0xf4C589029be33cc4e4056B125794B35A2dF23136',\n    mini_chef: {\n      address: '0x2572ECa2be804f7799e3f3Ef1D1db60F512a0Ae3',\n      active: true,\n      type: ChefType.MINI_CHEF_V2\n    },\n    community_treasury: '0x3a6e244678f392638876A92DAAa3C56e02dC1080',\n    airdrop: {\n      address: '0x630CC51306B1E2cf149B7F7a15F78bCD006A5D65',\n      active: false,\n      type: AirdropType.LEGACY\n    },\n    treasury_vester: '0xee82a2695c1ae2cCFC3DDDa643836Ff5E55Fa1e1',\n    revenue_distributor: '0xF3861Acb8061A70499DC85c4a6aA9E934C83049f',\n    fee_collector: '0x0609ce4F16388c440BF9a84b5E8df1b0438F714A',\n    multicall: '0xb465Fd2d9C71d5D6e6c069aaC9b4E21c69aAA78f',\n    staking: [\n      {\n        address: '0x5610E572c9f2a10BFd15861061F8B1Fe75e05b23',\n        active: true,\n        reward_token: '0xAF5D473b3f8F96A5B21c6bbB97e09b491335acb9',\n        type: StakingType.LEGACY\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'Avalanche',\n    symbol: 'AVAX',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.snowtrace.io']\n}\n\nexport const BOBA_MAINNET: Chain = {\n  id: 'boba_mainnet',\n  chain_id: 288,\n  name: 'Boba',\n  symbol: 'BOBA',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/boba.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.boba.network',\n  coingecko_id: 'boba',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://blockexplorer.boba.network']\n}\n\nexport const BITTORRENT_MAINNET: Chain = {\n  id: 'bittorrent_mainnet',\n  chain_id: 199,\n  name: 'BitTorrent',\n  symbol: 'BTT',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/btt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.bt.io',\n  nativeCurrency: {\n    name: 'BitTorrent',\n    symbol: 'BTT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://scan.bt.io']\n}\n\nexport const BITTORRENT_TESTNET: Chain = {\n  id: 'bittorrent_testnet',\n  chain_id: 1028,\n  name: 'BitTorrent Testnet',\n  symbol: 'BTT',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/btt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://test-rpc.bittorrentchain.io',\n  nativeCurrency: {\n    name: 'BitTorrent',\n    symbol: 'BTT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://scan.bittorrentchain.io']\n}\n\nexport const BSC_MAINNET: Chain = {\n  id: 'bsc_mainnet',\n  chain_id: 56,\n  name: 'Binance',\n  symbol: 'BSC',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/bsc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://bsc-dataseed.binance.org',\n  coingecko_id: 'binance-smart-chain',\n  nativeCurrency: {\n    name: 'Binance Coin',\n    symbol: 'BNB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://bscscan.com']\n}\n\nexport const BSC_TESTNET: Chain = {\n  id: 'bsc_testnet',\n  chain_id: 97,\n  name: 'Binance Testnet',\n  symbol: 'BSC',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/bsc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://data-seed-prebsc-1-s1.binance.org:8545',\n  nativeCurrency: {\n    name: 'Binance Coin',\n    symbol: 'BNB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.bscscan.com']\n}\n\nexport const CELO_MAINNET: Chain = {\n  id: 'celo_mainnet',\n  chain_id: 42220,\n  name: 'Celo',\n  symbol: 'CELO',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://forno.celo.org',\n  coingecko_id: 'celo',\n  nativeCurrency: {\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.celo.org']\n}\n\nexport const CELO_ALFAJORES_TESTNET: Chain = {\n  id: 'celo_alfadores_testnet',\n  chain_id: 44787,\n  name: 'Celo Alfajores',\n  symbol: 'CELO',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://alfajores-forno.celo-testnet.org',\n  nativeCurrency: {\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://alfajores-blockscout.celo-testnet.org']\n}\n\nexport const CELO_BAKLAVA_TESTNET: Chain = {\n  id: 'celo_baklava_testnet',\n  chain_id: 62320,\n  name: 'Celo Baklava',\n  symbol: 'CELO',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://baklava-forno.celo-testnet.org',\n  nativeCurrency: {\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://baklava-blockscout.celo-testnet.org']\n}\n\nexport const CRONOS_MAINNET: Chain = {\n  id: 'cronos_mainnet',\n  chain_id: 25,\n  name: 'Cronos',\n  symbol: 'CRO',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/cro.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://evm-cronos.crypto.org',\n  coingecko_id: 'cronos',\n  nativeCurrency: {\n    name: 'Cronos',\n    symbol: 'CRO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://cronos.org/explorer']\n}\n\nexport const CRONOS_TESTNET: Chain = {\n  id: 'cronos_testnet',\n  chain_id: 338,\n  name: 'Cronos',\n  symbol: 'CRO',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/cro.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://cronos-testnet-3.crypto.org:8545',\n  nativeCurrency: {\n    name: 'Cronos',\n    symbol: 'CRO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://cronos.org/explorer/testnet3']\n}\n\nexport const COSTON_TESTNET: Chain = {\n  id: 'coston_testnet',\n  chain_id: 16,\n  name: 'Coston',\n  symbol: 'cFLR',\n  png_symbol: 'PCT',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/flare.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://coston-api.flare.network/ext/bc/C/rpc',\n  contracts: {\n    png: '0x0A8744c2a48b0e09a3e4C3A381A8E0d8d900bAFe',\n    factory: '0xa5D4D920cea39f0344A99b2a3c4597E10DA16D88',\n    router: '0x6a6C605700f477E56B9542Ca2a3D68B9A7edf599',\n    wrapped_native_token: '0x1659941d425224408c5679eeef606666c7991a8A',\n    local_multisig: '0x177126EC2D5BabD6a1374135F082b875773afC45',\n    community_treasury: '0x48197135bA4a9F5F9aB1296A6405c9495AB4Cfd3',\n    treasury_vester: '0x1a6a55a22a696F757f0ade055200308B53D70CAc',\n    mini_chef: {\n      address: '0xFf0C4041ba52428612320cAD2016d07B2e4A802D',\n      active: true,\n      type: ChefType.PANGO_CHEF\n    },\n    airdrop: {\n      address: '0x700E2E6fd3C5174E9691a65DC12f44d0A8dd25EC',\n      active: true,\n      type: AirdropType.MERKLE_TO_STAKING\n    },\n    timelock: '0xc63C2BA9F4dD17F881d9195fD105611760689bAe',\n    fee_collector: '0x39DEA895DA8cC6ef744Da4C5Cc06F1E6150362f1',\n    multicall: '0xF7aB82e5253F65496e21dF0dacfA6D5e765b4874',\n    staking: [\n      {\n        address: '0xc064943492c9DF4f8238Bf52E7B7170A0Ec6FBAF',\n        active: true,\n        reward_token: '0x0A8744c2a48b0e09a3e4C3A381A8E0d8d900bAFe',\n        type: StakingType.SAR_POSITIONS\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'CostonFlare',\n    symbol: 'CFLR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://coston-explorer.flare.network']\n}\n\nexport const EVMOS_TESTNET: Chain = {\n  id: 'evmos_testnet',\n  chain_id: 9000,\n  name: 'EVMOS Testnet',\n  symbol: 'tEVMOS',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/evmos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://eth.bd.evmos.dev:8545',\n  nativeCurrency: {\n    name: 'EVMOS',\n    symbol: 'EVMOS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://evm.evmos.dev']\n}\n\nexport const EVMOS_MAINNET: Chain = {\n  id: 'evmos_mainnet',\n  chain_id: 9001,\n  name: 'EVMOS',\n  symbol: 'EVMOS',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/evmos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://eth.bd.evmos.org:8545',\n  nativeCurrency: {\n    name: 'EVMOS',\n    symbol: 'EVMOS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://evm.evmos.org']\n}\n\nexport const FANTOM_MAINNET: Chain = {\n  id: 'fantom_mainnet',\n  chain_id: 250,\n  name: 'Fantom',\n  symbol: 'FTM',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ftm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rpc.ftm.tools',\n  coingecko_id: 'fantom',\n  nativeCurrency: {\n    name: 'Fantom',\n    symbol: 'FTM',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://ftmscan.com']\n}\n\nexport const FANTOM_TESTNET: Chain = {\n  id: 'fantom_testnet',\n  chain_id: 4002,\n  name: 'Fantom',\n  symbol: 'FTM',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ftm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rpc.testnet.fantom.network',\n  nativeCurrency: {\n    name: 'Fantom',\n    symbol: 'FTM',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.ftmscan.com']\n}\n\nexport const FUSE_MAINNET: Chain = {\n  id: 'fuse_mainnet',\n  chain_id: 122,\n  name: 'Fuse',\n  symbol: 'FUSE',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/fuse.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.fuse.io',\n  coingecko_id: 'fuse',\n  nativeCurrency: {\n    name: 'Fuse',\n    symbol: 'FUSE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['http://explorer.fuse.io']\n}\n\nexport const FUSE_TESTNET: Chain = {\n  id: 'fuse_testnet',\n  chain_id: 123,\n  name: 'Fuse',\n  symbol: 'FUSE',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/fuse.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.fusespark.io',\n  nativeCurrency: {\n    name: 'Fuse',\n    symbol: 'FUSE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.fusespark.io']\n}\n\nexport const HARMONY_MAINNET: Chain = {\n  id: 'harmony_mainnet',\n  chain_id: 1666600000,\n  name: 'Harmony',\n  symbol: 'ONE',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/one.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.harmony.one',\n  coingecko_id: 'harmony-shard-0',\n  nativeCurrency: {\n    name: 'Harmony',\n    symbol: 'ONE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.harmony.one']\n}\n\nexport const HARMONY_TESTNET: Chain = {\n  id: 'harmony_testnet',\n  chain_id: 1666700000,\n  name: 'Harmony Testnet',\n  symbol: 'ONE',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/one.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.s0.b.hmny.io',\n  nativeCurrency: {\n    name: 'Harmony',\n    symbol: 'ONE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.pops.one']\n}\n\nexport const HECO_MAINNET: Chain = {\n  id: 'heco_mainnet',\n  chain_id: 128,\n  name: 'Heco',\n  symbol: 'HECO',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/heco.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://http-mainnet.hecochain.com',\n  coingecko_id: 'huobi-token',\n  nativeCurrency: {\n    name: 'Heco',\n    symbol: 'HECO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://hecoinfo.com']\n}\n\nexport const HECO_TESTNET: Chain = {\n  id: 'heco_testnet',\n  chain_id: 256,\n  name: 'Heco',\n  symbol: 'HECO',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/heco.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://http-testnet.hecochain.com',\n  nativeCurrency: {\n    name: 'Heco',\n    symbol: 'HECO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://scan-testnet.hecochain.com']\n}\n\nexport const KLAYTN_MAINNET: Chain = {\n  id: 'klaytn_mainnet',\n  chain_id: 8217,\n  name: 'Klaytn',\n  symbol: 'KLAY',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/klay.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://kaikas.cypress.klaytn.net:8651',\n  coingecko_id: 'klay-token',\n  nativeCurrency: {\n    name: 'Klaytn',\n    symbol: 'KLAY',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://scope.klaytn.com']\n}\n\nexport const KLAYTN_BAOBAB: Chain = {\n  id: 'klaytn_baobab',\n  chain_id: 1001,\n  name: 'Klaytn Baobab',\n  symbol: 'KLAY',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/klay.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.baobab.klaytn.net:8651',\n  nativeCurrency: {\n    name: 'Klaytn',\n    symbol: 'KLAY',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://baobab.scope.klaytn.com']\n}\n\nexport const METIS_MAINNET: Chain = {\n  id: 'metis_mainnet',\n  chain_id: 1088,\n  name: 'Metis',\n  symbol: 'METIS',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/metis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://andromeda.metis.io/?owner=1088',\n  coingecko_id: 'metis-andromeda',\n  nativeCurrency: {\n    name: 'Metis',\n    symbol: 'METIS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://andromeda-explorer.metis.io']\n}\n\nexport const METIS_RINKEBY: Chain = {\n  id: 'metis_rinkeby',\n  chain_id: 588,\n  name: 'Metis Rinkeby',\n  symbol: 'METIS',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/metis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://stardust.metis.io/?owner=588',\n  nativeCurrency: {\n    name: 'Metis',\n    symbol: 'tMETIS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://stardust-explorer.metis.io']\n}\n\nexport const MOONRIVER_MAINNET: Chain = {\n  id: 'moonriver_mainnet',\n  chain_id: 1285,\n  name: 'Moonriver',\n  symbol: 'MOVR',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/movr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.moonriver.moonbeam.network',\n  coingecko_id: 'moonriver',\n  nativeCurrency: {\n    name: 'Moonriver',\n    symbol: 'MOVR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://moonriver.moonscan.io']\n}\n\nexport const MOONBEAM_MAINNET: Chain = {\n  id: 'moonbeam_mainnet',\n  chain_id: 1284,\n  name: 'Moonbeam',\n  symbol: 'MOBM',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/mobm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.api.moonbeam.network',\n  coingecko_id: 'moonbeam',\n  nativeCurrency: {\n    name: 'Moonbeam',\n    symbol: 'GLMR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://moonscan.io']\n}\n\nexport const MOONBEAM_MOONBASE: Chain = {\n  id: 'moonbeam_moonbase',\n  chain_id: 1287,\n  name: 'Moonbase',\n  symbol: 'MOONBASE',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/mobm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.api.moonbase.moonbeam.network',\n  nativeCurrency: {\n    name: 'Moonbase',\n    symbol: 'DEV',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://moonbase.moonscan.io']\n}\n\nexport const NEAR_MAINNET: Chain = {\n  id: 'near_mainnet',\n  chain_id: 329847900, // NEAR acutally doesn't have this concept. So this is our naming convention for non EVM chains without Chain IDs\n  name: 'Near',\n  symbol: `NEAR`,\n  mainnet: true,\n  evm: false,\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.mainnet.near.org',\n  png_symbol: 'PNR',\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/near.svg',\n  contracts: {\n    png: 'png-token-v1.testnet',\n    factory: 'example2.near',\n    router: 'example3.near',\n    wrapped_native_token: 'wrap.near',\n    local_multisig: 'example5.near',\n    community_treasury: 'example6.near',\n    treasury_vester: 'example7.near',\n    mini_chef: {\n      address: 'example8.near',\n      active: true,\n      type: ChefType.NEAR_CHEF\n    },\n    airdrop: {\n      address: 'example9.near',\n      active: false,\n      type: AirdropType.NEAR_AIRDROP\n    },\n    timelock: 'example10.near',\n    governor: 'example11.near',\n    migrator: 'example12.near',\n    multicall: ''\n  },\n  nativeCurrency: {\n    name: 'Near',\n    symbol: 'NEAR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.near.org']\n}\n\nexport const NEAR_TESTNET: Chain = {\n  id: 'near_testnet',\n  chain_id: 329847901, // NEAR acutally doesn't have this concept. So this is our naming convention for non EVM chains without Chain IDs\n  name: 'Near',\n  symbol: `NEAR`,\n  mainnet: false,\n  evm: false,\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.testnet.near.org',\n  png_symbol: 'PNR',\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/near.svg',\n  contracts: {\n    png: 'png-token-v1.testnet',\n    factory: 'example2.near',\n    router: 'example3.near',\n    wrapped_native_token: 'wrap.testnet',\n    local_multisig: 'example5.near',\n    community_treasury: 'example6.near',\n    treasury_vester: 'example7.near',\n    mini_chef: {\n      address: 'example8.near',\n      active: true,\n      type: ChefType.NEAR_CHEF\n    },\n    airdrop: {\n      address: 'example9.near',\n      active: false,\n      type: AirdropType.NEAR_AIRDROP\n    },\n    timelock: 'example10.near',\n    governor: 'example11.near',\n    migrator: 'example12.near',\n    multicall: ''\n  },\n  nativeCurrency: {\n    name: 'Near',\n    symbol: 'NEAR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.testnet.near.org']\n}\n\nexport const OEC_MAINNET: Chain = {\n  id: 'oec_mainnet',\n  chain_id: 66,\n  name: 'OEC',\n  symbol: 'OKT',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/okt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://exchainrpc.okex.org',\n  coingecko_id: 'okex-chain',\n  nativeCurrency: {\n    name: 'OEC',\n    symbol: 'OKT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://www.oklink.com/okexchain']\n}\n\nexport const OEC_TESTNET: Chain = {\n  id: 'oec_testnet',\n  chain_id: 65,\n  name: 'OEC Testnet',\n  symbol: 'OKT',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/okt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://exchaintestrpc.okex.org',\n  nativeCurrency: {\n    name: 'OEC',\n    symbol: 'OKT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://www.oklink.com/oec-test']\n}\n\nexport const OP_MAINNET: Chain = {\n  id: 'op_mainnet',\n  chain_id: 10,\n  name: 'Optimism',\n  symbol: 'OP',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/op.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.optimism.io',\n  coingecko_id: 'optimistic-ethereum',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://optimistic.etherscan.io']\n}\n\nexport const OP_KOVAN: Chain = {\n  id: 'op_kovan',\n  chain_id: 69,\n  name: 'Optimism Kovan',\n  symbol: 'OP',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/op.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://kovan.optimism.io',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://kovan-optimistic.etherscan.io']\n}\n\nexport const POLYGON_MAINNET: Chain = {\n  id: 'polygon_mainnet',\n  chain_id: 137,\n  name: 'Polygon',\n  symbol: 'MATIC',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/matic.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://polygon-rpc.com',\n  coingecko_id: 'polygon-pos',\n  nativeCurrency: {\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://polygonscan.com']\n}\n\nexport const POLYGON_MUMBAI: Chain = {\n  id: 'polygon_mumbai',\n  chain_id: 80001,\n  name: 'Polygon Mumbai',\n  symbol: 'MATIC',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/matic.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://matic-mumbai.chainstacklabs.com',\n  contracts: {\n    png: '0x4828a3D98E428e73184374845f23C40eB76bA695',\n    factory: '0xf7b351C98B5585b7aDa089F3fFD0fED785fB6cff',\n    router: '0x680ad00c72B8d55436E2812Df0f5a9Df7675e054',\n    wrapped_native_token: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    local_multisig: '0x2412CF7162500001035B34a4aC4Cf4876B9a6f4b',\n    foundation_multisig: '0x9284868361460C0Ca3dfcDcf035e90F0ea3A72A0',\n    joint_multisig: '0x38F6d835FAF60a891016b2FC5692E76D2c6eEcbF',\n    community_treasury: '0x791d828FA611D5cD086e8047EAa8d7276c8d943E',\n    treasury_vester: '0xFeC5354eF11981D5dAF92F6CA61e618c5AdF4FD5',\n    mini_chef: {\n      address: '0xa34Ad412652267FB3b1261D7d4F351a678B01Bf8',\n      active: true,\n      type: ChefType.MINI_CHEF_V2\n    },\n    airdrop: {\n      address: '0x34338ad5D7fd49B24D07D1D8e8d38Fc64F42f94A',\n      active: false,\n      type: AirdropType.LEGACY\n    },\n    timelock: '0xE6ec3b8AD6ad20210a2698d89016DDF6965E5fBC',\n    revenue_distributor: '0x780A51831dc1cE3AAD2879479dBE9419e834744c',\n    fee_collector: '0xB2FcD54680150e3033A878cf1F689e1256d51fc5',\n    multicall: '',\n    staking: [\n      {\n        address: '0x3AA2baD17b768fFe5F9Fa05Ca95f97959862B41B',\n        active: true,\n        reward_token: '0x4828a3D98E428e73184374845f23C40eB76bA695',\n        type: StakingType.LEGACY\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://mumbai.polygonscan.com']\n}\n\nexport const SONGBIRD_CANARY: Chain = {\n  id: 'songbird_canary',\n  chain_id: 19,\n  name: 'Songbird',\n  symbol: 'SGB',\n  png_symbol: 'PSB',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/sgb.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://sgb.ftso.com.au/ext/bc/C/rpc',\n  contracts: {\n    png: '0xb2987753D1561570f726Aa373F48E77e27aa5FF4',\n    factory: '0xB66E62b25c42D55655a82F8ebf699f2266f329FB',\n    router: '0x6591cf4E1CfDDEcB4Aa5946c033596635Ba6FB0F',\n    wrapped_native_token: '0x02f0826ef6aD107Cfc861152B32B52fD11BaB9ED',\n    local_multisig: '0xe18dFC20edE326930d11b3316E92bdC1F606dc94',\n    community_treasury: '0xA2e6eFFdbb278744E286F602Bfaa2BcDAccBb1AA',\n    treasury_vester: '0x47d3d75E68594960845Bb3fD89f6a73E0Af8093E',\n    mini_chef: {\n      address: '0x76489156Fff6f4B89626f58386366941150642B7',\n      active: true,\n      type: ChefType.PANGO_CHEF\n    },\n    airdrop: {\n      address: '0x1c4429A271ec5E36a2FDc6400A5a6e49E605dF17',\n      active: true,\n      type: AirdropType.MERKLE_TO_STAKING\n    },\n    timelock: '0xF92F8A011A55C243CBAA096A62d9C48880070af6',\n    fee_collector: '0x7d84e8A7c89F84a97a0e190B45E4D2fC27412894',\n    multicall: '0x17032Ea9c3a13Ed337665145364c0d2aD1108c91',\n    staking: [\n      {\n        address: '0x7428A089A79B24400a620F1Cbf8bd0526cFae777',\n        active: true,\n        reward_token: '0xb2987753D1561570f726Aa373F48E77e27aa5FF4',\n        type: StakingType.SAR_POSITIONS\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'Songbird',\n    symbol: 'SGB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://songbird-explorer.flare.network']\n}\n\nexport const FLARE_MAINNET: Chain = {\n  id: 'flare_mainnet',\n  chain_id: 14,\n  name: 'Flare',\n  symbol: 'FLR',\n  png_symbol: 'PFL',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/flare.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://flare-api.flare.network/ext/C/rpc',\n  nativeCurrency: {\n    name: 'Flare',\n    symbol: 'FLR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://flare-explorer.flare.network']\n}\n\nexport const WAGMI_FUJI_SUBNET: Chain = {\n  id: 'wagmi_fuji_subnet',\n  chain_id: 11111,\n  name: 'Wagmi',\n  symbol: 'WGMI',\n  png_symbol: 'wagmiPNG',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/wgmi.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://subnets.avax.network/wagmi/wagmi-chain-testnet/rpc',\n  contracts: {\n    png: '0xbdf33c7128fBB220fc0e4Be277697cEeef8BdfF5',\n    factory: '0xee2162F7A04f3abA4925BfdC2e262533bd6Be516',\n    router: '0x924ec1B00109D355Bb2Aa045fAC3b08ceB70Fa3d',\n    wrapped_native_token: '0x3Ee7094DADda15810F191DD6AcF7E4FFa37571e4',\n    local_multisig: '0x0000000000000000000000000000000000000000',\n    community_treasury: '0x2CE6B673aDB3032A1694daC7c1F07c345F18Ae2d',\n    treasury_vester: '0x9DB06A311B3c06D0841782BA0D5004CDEA96e21A',\n    mini_chef: {\n      address: '0x3014526b462ceef5734d9AaAe24321769E59269a',\n      active: true,\n      type: ChefType.MINI_CHEF_V2\n    },\n    airdrop: {\n      address: '0x0BD8b5D5FF2d4FCcDf7782Af15368FcAFE040Bd1',\n      active: false,\n      type: AirdropType.LEGACY\n    },\n    timelock: '0x2d41E2CDf9E74686d89e4A0BeA5dD4D01F7D134e',\n    governor: '0x0000000000000000000000000000000000000000',\n    migrator: '0x0000000000000000000000000000000000000000',\n    multicall: '0x5138349f3027F1e2c2f10eDAD83d38096C0D8Abe',\n    staking: [\n      {\n        address: '0x4C08b0D7F51A27db7baFb8Dc4632494Df8d53Af8',\n        active: true,\n        reward_token: '0xbdf33c7128fBB220fc0e4Be277697cEeef8BdfF5',\n        type: StakingType.LEGACY\n      },\n      {\n        address: '0xf9E3691617151969f30b0Da57AA0c9f4698ef6ab',\n        active: true,\n        reward_token: '0xbdf33c7128fBB220fc0e4Be277697cEeef8BdfF5',\n        type: StakingType.SAR_POSITIONS\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'Wagmi',\n    symbol: 'WGMI',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://subnets.avax.network/wagmi/wagmi-chain-testnet/explorer']\n}\n\nexport const XDAI_MAINNET: Chain = {\n  id: 'xdai_mainnet',\n  chain_id: 100,\n  name: 'Gnosis',\n  symbol: 'XDAI',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/xdai.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.xdaichain.com',\n  coingecko_id: 'xdai',\n  nativeCurrency: {\n    name: 'Gnosis',\n    symbol: 'xDAI',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://blockscout.com/xdai/mainnet']\n}\n\nexport const EWC_MAINNET: Chain = {\n  id: 'ewc_mainnet',\n  chain_id: 246,\n  name: 'Energy Web Chain',\n  symbol: 'EWT',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ewc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.energyweb.org',\n  nativeCurrency: {\n    name: 'Energy Web Token',\n    symbol: 'EWT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['http://explorer.energyweb.org']\n}\n\nexport const EWC_TESTNET: Chain = {\n  id: 'ewc_testnet',\n  chain_id: 73799,\n  name: 'Volta',\n  symbol: 'VT',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ewc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://volta-rpc.energyweb.org',\n  nativeCurrency: {\n    name: 'Volta',\n    symbol: 'VT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['http://volta-aexplorer.energyweb.org']\n}\n\nexport const IOTEX_MAINNET: Chain = {\n  id: 'iotex_mainnet',\n  chain_id: 4689,\n  name: 'IoTex Mainnet',\n  symbol: 'IOTX',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/iotx.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://babel-api.mainnet.iotex.io',\n  coingecko_id: 'iotex',\n  nativeCurrency: {\n    name: 'IoTex',\n    symbol: 'IOTX',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://iotexscan.io']\n}\n\nexport const IOTEX_TESTNET: Chain = {\n  id: 'iotex_testnet',\n  chain_id: 4690,\n  name: 'IoTex Testnet',\n  symbol: 'IOTX',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/iotx.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://babel-api.testnet.iotex.io',\n  nativeCurrency: {\n    name: 'IoTex',\n    symbol: 'IOTX',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.iotexscan.io']\n}\n\nexport const ASTAR_MAINNET: Chain = {\n  id: 'astar_mainnet',\n  chain_id: 592,\n  name: 'Astar Network',\n  symbol: 'ASTR',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://astar.api.onfinality.io/public',\n  nativeCurrency: {\n    name: 'Astar',\n    symbol: 'ASTL',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://blockscout.com/astar']\n}\n\nexport const SHIDEN_MAINNET: Chain = {\n  id: 'astar_shiden_testnet',\n  chain_id: 336,\n  name: 'Shiden Network',\n  symbol: 'SDN',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://shiden.api.onfinality.io/public',\n  nativeCurrency: {\n    name: 'Shiden',\n    symbol: 'SDN',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://blockscout.com/shiden']\n}\n\nexport const SHIBUYA_TESTNET: Chain = {\n  id: 'astar_shibuya_testnet',\n  chain_id: 81,\n  name: 'Shibuya Network',\n  symbol: 'SBY',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.shibuya.astar.network:8545',\n  nativeCurrency: {\n    name: 'Shibuya',\n    symbol: 'SBY',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://blockscout.com/shibuya']\n}\n\nexport const TELOS_MAINNET: Chain = {\n  id: 'telos_mainnet',\n  chain_id: 40,\n  name: 'Telos',\n  symbol: 'TLOS',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/telos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.telos.net/evm',\n  coingecko_id: 'telos',\n  nativeCurrency: {\n    name: 'TELOS',\n    symbol: 'TLOS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://www.teloscan.io']\n}\n\nexport const TELOS_TESTNET: Chain = {\n  id: 'telos_testnet',\n  chain_id: 41,\n  name: 'Telos Testnet',\n  symbol: 'TLOS',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/telos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.telos.net/evm',\n  nativeCurrency: {\n    name: 'TELOS',\n    symbol: 'TLOS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.telos.net/v2/explore']\n}\n\nexport const OASIS_MAINNET: Chain = {\n  id: 'oasis_mainnet',\n  chain_id: 42262,\n  name: 'Oasis Emerald',\n  symbol: 'ROSE',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/oasis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://emerald.oasis.dev',\n  coingecko_id: 'oasis',\n  nativeCurrency: {\n    name: 'Oasis Network',\n    symbol: 'ROSE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.emerald.oasis.dev']\n}\n\nexport const OASIS_TESTNET: Chain = {\n  id: 'oasis_testnet',\n  chain_id: 42261,\n  name: 'Oasis Emerald Testnet',\n  symbol: 'ROSE',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/oasis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.emerald.oasis.dev',\n  nativeCurrency: {\n    name: 'Oasis Network',\n    symbol: 'ROSE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.explorer.emerald.oasis.dev']\n}\n\nexport const GODWOKEN_MAINNET: Chain = {\n  id: 'godwoken_mainnet',\n  chain_id: 71394,\n  name: 'Godwoken Testnet',\n  symbol: 'CKB',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/godwoken.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.godwoken.io/rpc/eth-wallet',\n  nativeCurrency: {\n    name: 'Nervos Network',\n    symbol: 'CKB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://gwscan.com']\n}\n\nexport const GODWOKEN_TESTNET: Chain = {\n  id: 'godwoken_mainnet',\n  chain_id: 71393,\n  name: 'Godwoken Testnet',\n  symbol: 'CKB',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/godwoken.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://godwoken-testnet-web3-v1-rpc.ckbapp.dev/',\n  nativeCurrency: {\n    name: 'Nervos Network',\n    symbol: 'CKB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://aggron.gwscan.com/en-US']\n}\n\nexport const CHAINS: { [chainId in ChainId]: Chain } = {\n  [ChainId.FUJI]: AVALANCHE_FUJI,\n  [ChainId.AVALANCHE]: AVALANCHE_MAINNET,\n  [ChainId.WAGMI]: WAGMI_FUJI_SUBNET,\n  [ChainId.COSTON]: COSTON_TESTNET,\n  [ChainId.SONGBIRD]: SONGBIRD_CANARY,\n  [ChainId.NEAR_MAINNET]: NEAR_MAINNET,\n  [ChainId.NEAR_TESTNET]: NEAR_TESTNET\n}\n\nexport const ALL_CHAINS: Chain[] = [\n  ETHEREUM_MAINNET,\n  ARBITRUM_MAINNET,\n  ARBITRUM_RINKEBY,\n  AURORA_MAINNET,\n  AURORA_TESTNET,\n  AVALANCHE_MAINNET,\n  AVALANCHE_FUJI,\n  BOBA_MAINNET,\n  BITTORRENT_MAINNET,\n  BSC_MAINNET,\n  BSC_TESTNET,\n  CELO_MAINNET,\n  CELO_ALFAJORES_TESTNET,\n  CELO_BAKLAVA_TESTNET,\n  COSTON_TESTNET,\n  CRONOS_MAINNET,\n  CRONOS_TESTNET,\n  EVMOS_MAINNET,\n  EVMOS_TESTNET,\n  FANTOM_MAINNET,\n  FANTOM_TESTNET,\n  FUSE_MAINNET,\n  FUSE_TESTNET,\n  HARMONY_MAINNET,\n  HARMONY_TESTNET,\n  HECO_MAINNET,\n  HECO_TESTNET,\n  KLAYTN_MAINNET,\n  KLAYTN_BAOBAB,\n  METIS_MAINNET,\n  METIS_RINKEBY,\n  MOONRIVER_MAINNET,\n  MOONBEAM_MAINNET,\n  MOONBEAM_MOONBASE,\n  OEC_MAINNET,\n  OEC_TESTNET,\n  OP_MAINNET,\n  OP_KOVAN,\n  POLYGON_MAINNET,\n  POLYGON_MUMBAI,\n  SONGBIRD_CANARY,\n  WAGMI_FUJI_SUBNET,\n  XDAI_MAINNET,\n  EWC_MAINNET,\n  EWC_TESTNET,\n  IOTEX_MAINNET,\n  IOTEX_TESTNET,\n  ASTAR_MAINNET,\n  SHIDEN_MAINNET,\n  SHIBUYA_TESTNET,\n  TELOS_MAINNET,\n  TELOS_TESTNET,\n  OASIS_MAINNET,\n  OASIS_TESTNET,\n  GODWOKEN_MAINNET,\n  GODWOKEN_TESTNET\n]\n","import JSBI from 'jsbi'\nimport { ChainId, CHAINS } from './chains'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.FUJI]: CHAINS[ChainId.FUJI].contracts!.factory,\n  [ChainId.AVALANCHE]: CHAINS[ChainId.AVALANCHE].contracts!.factory,\n  [ChainId.WAGMI]: CHAINS[ChainId.WAGMI].contracts!.factory,\n  [ChainId.COSTON]: CHAINS[ChainId.COSTON].contracts!.factory,\n  [ChainId.SONGBIRD]: CHAINS[ChainId.SONGBIRD].contracts!.factory,\n  [ChainId.NEAR_MAINNET]: CHAINS[ChainId.NEAR_MAINNET].contracts!.factory,\n  [ChainId.NEAR_TESTNET]: CHAINS[ChainId.NEAR_TESTNET].contracts!.factory\n}\n\nexport const INIT_CODE_HASH = '0x40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the pool method is not supported for the particular implementation\n */\nexport class MethodNotSupported extends Error {\n  public readonly isMethodNotSupportedError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\nexport function abs(x: JSBI): JSBI {\n  if (JSBI.lessThan(x, ZERO)) return JSBI.multiply(x, JSBI.BigInt(-1))\n  else return x\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\nimport { CHAINS } from '../chains'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n\n  //$ public static readonly CAVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\n\n  public static readonly CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.FUJI]: new Currency(18, CHAINS[ChainId.FUJI].symbol, CHAINS[ChainId.FUJI].name),\n    [ChainId.AVALANCHE]: new Currency(18, CHAINS[ChainId.AVALANCHE].symbol, CHAINS[ChainId.AVALANCHE].name),\n    [ChainId.WAGMI]: new Currency(18, CHAINS[ChainId.WAGMI].symbol, CHAINS[ChainId.WAGMI].name),\n    [ChainId.COSTON]: new Currency(18, CHAINS[ChainId.COSTON].symbol, CHAINS[ChainId.COSTON].name),\n    [ChainId.SONGBIRD]: new Currency(18, CHAINS[ChainId.SONGBIRD].symbol, CHAINS[ChainId.SONGBIRD].name),\n    [ChainId.NEAR_MAINNET]: new Currency(24, CHAINS[ChainId.NEAR_MAINNET].symbol, CHAINS[ChainId.NEAR_MAINNET].name),\n    [ChainId.NEAR_TESTNET]: new Currency(24, CHAINS[ChainId.NEAR_TESTNET].symbol, CHAINS[ChainId.NEAR_TESTNET].name)\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\n//$ const CAVAX = Currency.CAVAX\nconst CAVAX = Currency.CURRENCY\nexport { CAVAX }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../chains'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\nimport { CHAINS } from '../chains'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId = ChainId.AVALANCHE\n  public readonly address: string\n\n  public constructor(\n    chainId: ChainId = ChainId.AVALANCHE,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n\n    // only validate address for evm chains\n    const shouldValidateAddress = !!CHAINS[chainId]?.evm\n    this.address = shouldValidateAddress ? validateAndParseAddress(address) : address\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WAVAX: { [chainId in ChainId]: Token } = {\n  [ChainId.FUJI]: new Token(\n    ChainId.FUJI,\n    CHAINS[ChainId.FUJI].contracts!.wrapped_native_token,\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    CHAINS[ChainId.AVALANCHE].contracts!.wrapped_native_token,\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.WAGMI]: new Token(\n    ChainId.WAGMI,\n    CHAINS[ChainId.WAGMI].contracts!.wrapped_native_token,\n    18,\n    'wWAGMI',\n    'Wrapped WAGMI'\n  ),\n  [ChainId.COSTON]: new Token(\n    ChainId.COSTON,\n    CHAINS[ChainId.COSTON].contracts!.wrapped_native_token,\n    18,\n    'WCFLR',\n    'Wrapped CostonFlare'\n  ),\n  [ChainId.SONGBIRD]: new Token(\n    ChainId.SONGBIRD,\n    CHAINS[ChainId.SONGBIRD].contracts!.wrapped_native_token,\n    18,\n    'wWSGB',\n    'Wrapped Songbird'\n  ),\n  [ChainId.NEAR_MAINNET]: new Token(\n    ChainId.NEAR_MAINNET,\n    CHAINS[ChainId.NEAR_MAINNET].contracts!.wrapped_native_token,\n    24,\n    'wNEAR',\n    'Wrapped NEAR'\n  ),\n  [ChainId.NEAR_TESTNET]: new Token(\n    ChainId.NEAR_TESTNET,\n    CHAINS[ChainId.NEAR_TESTNET].contracts!.wrapped_native_token,\n    24,\n    'wNEAR',\n    'Wrapped NEAR'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, CAVAX } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\nimport { ChainId } from '../../chains'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   * @param chainId\n   */\n  public static ether(amount: BigintIsh, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    return new CurrencyAmount(CAVAX[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\nimport { ChainId } from '../../chains'\n\nexport class Price extends Fraction {\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param chainId\n   */\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pool] of route.pools.entries()) {\n      prices.push(pool.priceOf(route.path[i], route.path[i + 1]))\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient, chainId)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { ChainId } from '../chains'\nimport invariant from 'tiny-invariant'\nimport { Currency, CAVAX } from './currency'\nimport { Token, WAVAX } from './token'\nimport { Pool } from './pools/pool'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pools: Pool[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pools: Pool[], input: Currency, output: Currency, hops: Token[] = []) {\n    invariant(pools.length > 0, 'PAIRS')\n    invariant(pools.every(pool => pool.tokenCount === 2) || hops.length === pools.length - 1, 'HOPS')\n    const chainId = pools[0].chainId\n    invariant(\n      pools.every(pool => pool.chainId === chainId),\n      'CHAIN_IDS'\n    )\n    if (input === CAVAX[chainId]) {\n      invariant(pools[0].involvesToken(WAVAX[chainId]), 'INPUT')\n    }\n    if (output === CAVAX[chainId]) {\n      invariant(pools[pools.length - 1].involvesToken(WAVAX[chainId]), 'OUTPUT')\n    }\n\n    const wrappedInput: Token = input instanceof Token ? input : WAVAX[chainId]\n    const wrappedOutput: Token = output instanceof Token ? output : WAVAX[chainId]\n\n    const path: Token[] = [wrappedInput]\n\n    for (const [i, pool] of pools.entries()) {\n      const inputToken = path[i]\n      invariant(pool.involvesToken(inputToken), 'PATH')\n      let outputToken: Token\n      if (pool.tokenCount === 2) {\n        outputToken = inputToken.equals(pool.token(0)) ? pool.token(1) : pool.token(0)\n      } else {\n        // When a pool has 3+ tokens we need `hops` to guarantee a deterministic path\n        outputToken = i === pools.length ? wrappedOutput : hops[i]\n        invariant(!inputToken.equals(outputToken), 'DUPLICATE')\n        invariant(pool.involvesToken(outputToken), 'PATH')\n      }\n      path.push(outputToken)\n    }\n\n    this.pools = pools\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output\n  }\n\n  public get chainId(): ChainId {\n    return this.pools[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId, InsufficientInputAmountError, InsufficientReservesError } from '..'\n\nimport { ONE, TradeType, ZERO, ZERO_ADDRESS } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, CAVAX } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pool } from './pools'\nimport { Route } from './route'\nimport { currencyEquals, Token, WAVAX } from './token'\n\nconst ZERO_PERCENT = new Percent(ZERO)\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\nexport interface DaasOptions {\n  fee: Percent\n  feeTo: string\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === CAVAX[chainId]) return new TokenAmount(WAVAX[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId = ChainId.AVALANCHE): Token {\n  if (currency instanceof Token) return currency\n  if (currency === CAVAX[chainId]) return WAVAX[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pools.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pools the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  public readonly chainId: ChainId = ChainId.AVALANCHE\n\n  public readonly fee: Percent = new Percent(ZERO)\n\n  public readonly feeTo: string = ZERO_ADDRESS\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   * @param chainId chain id\n   * @param daasOptions fee information possibly imposed via DEX as a service\n   */\n  public static exactIn(\n    route: Route,\n    amountIn: CurrencyAmount,\n    chainId: ChainId = ChainId.AVALANCHE,\n    daasOptions?: DaasOptions\n  ): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, chainId, daasOptions)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   * @param chainId chain id\n   * @param daasOptions fee information possibly imposed via DEX as a service\n   */\n  public static exactOut(\n    route: Route,\n    amountOut: CurrencyAmount,\n    chainId: ChainId = ChainId.AVALANCHE,\n    daasOptions?: DaasOptions\n  ): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, chainId, daasOptions)\n  }\n\n  public constructor(\n    route: Route,\n    amount: CurrencyAmount,\n    tradeType: TradeType,\n    chainId: ChainId = ChainId.AVALANCHE,\n    { fee, feeTo }: DaasOptions = { fee: ZERO_PERCENT, feeTo: ZERO_ADDRESS }\n  ) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPools: Pool[] = new Array(route.pools.length)\n    let fullOutputAmount: TokenAmount\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount, nextPool] = pool.getOutputAmount(amounts[i], route.path[i + 1])\n        amounts[i + 1] = outputAmount\n        nextPools[i] = nextPool\n      }\n      fullOutputAmount = amounts[amounts.length - 1]\n      const userReceivedAmountOut = new Fraction(ONE).subtract(fee).multiply(fullOutputAmount.raw).quotient\n      amounts[amounts.length - 1] = new TokenAmount(fullOutputAmount.token, userReceivedAmountOut)\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      const userReceivedAmountOut = wrappedAmount(amount, route.chainId)\n      const fullOutputQuantity = new Fraction(ONE).add(fee).multiply(userReceivedAmountOut.raw).quotient\n      fullOutputAmount = new TokenAmount(userReceivedAmountOut.token, fullOutputQuantity)\n      amounts[amounts.length - 1] = fullOutputAmount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        const [inputAmount, nextPool] = pool.getInputAmount(amounts[i], route.path[i - 1])\n        amounts[i - 1] = inputAmount\n        nextPools[i - 1] = nextPool\n      }\n      amounts[amounts.length - 1] = userReceivedAmountOut\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === CAVAX[chainId]\n        ? CurrencyAmount.ether(amounts[0].raw, chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === CAVAX[chainId]\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw, chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPools, route.input, route.output))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, fullOutputAmount)\n    this.chainId = chainId\n    this.fee = fee\n    this.feeTo = feeTo\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param fee total fee possibly imposed via DEX as a service\n   * @param feeTo possible DEX as a service partner\n   * @param currentPools used in recursion; the current list of pools\n   * @param currentHops used in recursion; the current list of intermediate hops for pools with 3+ assets\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    { fee, feeTo }: DaasOptions = { fee: ZERO_PERCENT, feeTo: ZERO_ADDRESS },\n    // used in recursion.\n    currentPools: Pool[] = [],\n    currentHops: Token[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenIn = amountIn.token\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n\n      if (pool.reserves.some((reserve: TokenAmount) => reserve.equalTo(ZERO))) {\n        // Remove this pool from future routing consideration\n        pools = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n        i--\n        continue\n      }\n      if (!pool.involvesToken(tokenIn)) continue\n\n      // Avoid repeatedly calling tokenAmounts.map (nested in pool.tokens) during the subsequent for loop\n      const poolTokens: Token[] = pool.tokens\n\n      for (const tokenHop of poolTokens) {\n        if (tokenHop.equals(tokenIn)) continue\n\n        let amountOut: TokenAmount\n        try {\n          ;[amountOut] = pool.getOutputAmount(amountIn, tokenHop)\n        } catch (error) {\n          if (error instanceof InsufficientInputAmountError || error instanceof InsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        // we have arrived at the output token, so this is the final trade of one of the paths\n        if (amountOut.token.equals(tokenOut)) {\n          sortedInsert(\n            bestTrades,\n            new Trade(\n              new Route([...currentPools, pool], originalAmountIn.currency, currencyOut, currentHops),\n              originalAmountIn,\n              TradeType.EXACT_INPUT,\n              chainId,\n              { fee, feeTo }\n            ),\n            maxNumResults,\n            tradeComparator\n          )\n        } else if (maxHops > 1 && pools.length > 1) {\n          const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n          // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n          Trade.bestTradeExactIn(\n            poolsExcludingThisPool,\n            amountOut,\n            currencyOut,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            { fee, feeTo },\n            [...currentPools, pool],\n            [...currentHops, tokenHop],\n            originalAmountIn,\n            bestTrades\n          )\n        }\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param fee total fee possibly imposed via DEX as a service\n   * @param feeTo possible DEX as a service partner\n   * @param currentPools used in recursion; the current list of pools\n   * @param currentHops used in recursion; the current list of intermediate hops for pools with 3+ assets\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pools: Pool[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    { fee, feeTo }: DaasOptions = { fee: ZERO_PERCENT, feeTo: ZERO_ADDRESS },\n    // used in recursion.\n    currentPools: Pool[] = [],\n    currentHops: Token[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    const tokenOut = amountOut.token\n\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n\n      if (pool.reserves.some((reserve: TokenAmount) => reserve.equalTo(ZERO))) {\n        // Remove this pool from future routing consideration\n        pools = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n        i--\n        continue\n      }\n      if (!pool.involvesToken(tokenOut)) continue\n\n      // Avoid repeatedly calling tokenAmounts.map (nested in pool.tokens) during the subsequent for loop\n      const poolTokens: Token[] = pool.tokens\n\n      for (const tokenHop of poolTokens) {\n        if (tokenHop.equals(tokenOut)) continue\n\n        let amountIn: TokenAmount\n        try {\n          ;[amountIn] = pool.getInputAmount(amountOut, tokenHop)\n        } catch (error) {\n          if (error instanceof InsufficientInputAmountError || error instanceof InsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        // we have arrived at the input token, so this is the first trade of one of the paths\n        if (amountIn.token.equals(tokenIn)) {\n          sortedInsert(\n            bestTrades,\n            new Trade(\n              new Route([pool, ...currentPools], currencyIn, originalAmountOut.currency, currentHops),\n              originalAmountOut,\n              TradeType.EXACT_OUTPUT,\n              chainId,\n              { fee, feeTo }\n            ),\n            maxNumResults,\n            tradeComparator\n          )\n        } else if (maxHops > 1 && pools.length > 1) {\n          const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n          // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n          Trade.bestTradeExactOut(\n            poolsExcludingThisPool,\n            currencyIn,\n            amountIn,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            { fee, feeTo },\n            [pool, ...currentPools],\n            [tokenHop, ...currentHops],\n            originalAmountOut,\n            bestTrades\n          )\n        }\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Token } from '../token'\nimport { ChainId } from '../../chains'\nimport { Price, TokenAmount } from '../fractions'\n\nexport abstract class Pool {\n  public readonly chainId: ChainId\n  public readonly liquidityToken: Token\n\n  protected readonly tokenAmounts: TokenAmount[]\n\n  protected constructor(chainId: ChainId, liquidityToken: Token, tokenAmounts: TokenAmount[]) {\n    const addresses = tokenAmounts.map(tokenAmount => tokenAmount.token.address.toLowerCase())\n    invariant(\n      addresses.every((address, i) => addresses.indexOf(address) === i),\n      'DUPLICATE_TOKEN'\n    )\n    invariant(tokenAmounts.length > 0, 'INSUFFICIENT_TOKENS')\n    invariant(\n      tokenAmounts.every(({ token }) => token.chainId === chainId),\n      'CHAIN_MISMATCH'\n    )\n\n    this.chainId = chainId\n    this.liquidityToken = liquidityToken\n    this.tokenAmounts = tokenAmounts\n  }\n\n  // Tokens\n\n  get tokenCount(): number {\n    return this.tokenAmounts.length\n  }\n\n  get tokens(): Token[] {\n    return this.tokenAmounts.map(tokenAmount => tokenAmount.token)\n  }\n\n  involvesToken(token: Token): boolean {\n    return this.tokenAmounts.some(tokenAmount => tokenAmount.token.equals(token))\n  }\n\n  token(index: number): Token {\n    return this.tokenAmounts[index].token\n  }\n\n  tokenIndex(token: Token): number {\n    return this.tokenAmounts.findIndex(tokenAmount => tokenAmount.token.equals(token))\n  }\n\n  // Reserves\n\n  get reserves(): TokenAmount[] {\n    return this.tokenAmounts\n  }\n\n  reserveOfIndex(index: number): TokenAmount {\n    return this.tokenAmounts[index]\n  }\n\n  reserveOfToken(token: Token): TokenAmount {\n    const index = this.tokenIndex(token)\n    invariant(index >= 0, 'TOKEN_MISSING')\n    return this.tokenAmounts[index]\n  }\n\n  // Prices\n\n  priceOf(baseToken: Token, quoteToken: Token): Price {\n    return new Price(baseToken, quoteToken, this.reserveOfToken(baseToken).raw, this.reserveOfToken(quoteToken).raw)\n  }\n\n  // Swap\n\n  abstract getOutputAmount(inputAmount: TokenAmount, outputToken: Token): [TokenAmount, Pool]\n\n  abstract getInputAmount(outputAmount: TokenAmount, inputToken: Token): [TokenAmount, Pool]\n\n  // Swap Fees\n\n  abstract get swapFeeCoefficient(): JSBI\n\n  abstract get swapFeeDivisor(): JSBI\n\n  // Mint\n\n  abstract getLiquidityMinted(totalSupply: TokenAmount, depositTokenAmounts: TokenAmount[]): TokenAmount\n\n  // Burn\n\n  abstract getLiquidityValues(totalSupply: TokenAmount, shares: TokenAmount, options?: object): TokenAmount[]\n}\n","import { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Pool } from './pool'\nimport { Token } from '../token'\nimport { Price, TokenAmount } from '../fractions'\nimport { ChainId, CHAINS } from '../../chains'\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _998,\n  _1000\n} from '../../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../../errors'\nimport { sqrt, parseBigintIsh } from '../../utils'\n\nexport class Pair extends Pool {\n  public static getAddress(tokenA: Token, tokenB: Token, chainId: ChainId = ChainId.AVALANCHE): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    // we create custom lp address here\n    // for evm we have method to create lp address\n    // but for non-evm we don't have that method, so for now we are going to concatenate both token addresses\n    return !!CHAINS[chainId]?.evm\n      ? getCreate2Address(\n          FACTORY_ADDRESS[chainId],\n          keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n          INIT_CODE_HASH\n        )\n      : `${tokens[0].address}-${tokens[1].address}`\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, chainId: ChainId = ChainId.AVALANCHE) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    let decimals: number\n    if ([ChainId.NEAR_TESTNET, ChainId.NEAR_MAINNET].includes(chainId)) {\n      decimals = 24\n    } else {\n      decimals = 18\n    }\n\n    const liquidityToken = new Token(\n      chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, chainId),\n      decimals,\n      'PGL',\n      'Pangolin Liquidity'\n    )\n\n    super(chainId, liquidityToken, tokenAmounts)\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get token0Price(): Price {\n    return this.priceOf(this.token0, this.token1)\n  }\n\n  public get token1Price(): Price {\n    return this.priceOf(this.token1, this.token0)\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public get swapFeeCoefficient(): JSBI {\n    switch (this.chainId) {\n      case ChainId.NEAR_MAINNET:\n      case ChainId.NEAR_TESTNET:\n        return _998 // 0.2%\n      default:\n        return _997 // 0.3%\n    }\n  }\n\n  public get swapFeeDivisor(): JSBI {\n    switch (this.chainId) {\n      default:\n        return _1000\n    }\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, outputToken: Token): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token) && this.involvesToken(outputToken), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOfToken(inputAmount.token)\n    const outputReserve = this.reserveOfToken(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, this.swapFeeCoefficient)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, this.swapFeeDivisor), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.chainId)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, inputToken: Token): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token) && this.involvesToken(inputToken), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOfToken(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOfToken(outputAmount.token)\n    const inputReserve = this.reserveOfToken(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), this.swapFeeDivisor)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), this.swapFeeCoefficient)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.chainId)]\n  }\n\n  public getLiquidityMinted(totalSupply: TokenAmount, depositTokenAmounts: TokenAmount[]): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(depositTokenAmounts.length === 2, 'LIQUIDITY_TOKENS')\n    const tokenAmounts = depositTokenAmounts[0].token.sortsBefore(depositTokenAmounts[1].token) // does safety checks\n      ? [depositTokenAmounts[0], depositTokenAmounts[1]]\n      : [depositTokenAmounts[1], depositTokenAmounts[0]]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValues(\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    options?: {\n      feeOn?: boolean\n      kLast?: BigintIsh\n    }\n  ): TokenAmount[] {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!options?.feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!options?.kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(options.kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return this.reserves.map(\n      (reserve: TokenAmount) =>\n        new TokenAmount(reserve.token, JSBI.divide(JSBI.multiply(liquidity.raw, reserve.raw), totalSupplyAdjusted.raw))\n    )\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Pool } from './pool'\nimport { Token } from '../token'\nimport { ChainId } from '../../chains'\nimport { ZERO, TWO, TEN, ONE } from '../../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError, MethodNotSupported } from '../../errors'\nimport { TokenAmount } from '../fractions'\nimport { abs } from '../../utils'\n\nexport const TARGET_DECIMAL = JSBI.BigInt(18)\nexport const MIN_RESERVE = JSBI.exponentiate(TEN, TARGET_DECIMAL)\n\nexport class Vault extends Pool {\n  public readonly amp: JSBI\n\n  static getAddress(tokens: Token[]): string {\n    return tokens.map((token: Token) => token.address).join('-')\n  }\n\n  public constructor(tokenAmounts: TokenAmount[], amp: JSBI, chainId: ChainId = ChainId.NEAR_TESTNET) {\n    invariant(JSBI.greaterThanOrEqual(amp, ONE) && JSBI.lessThanOrEqual(amp, JSBI.BigInt(1_000_000)), 'AMP_ILLEGAL')\n    invariant(\n      tokenAmounts.every(({ token }) => token.decimals >= 1 && token.decimals <= 24),\n      'DECIMAL_ILLEGAL'\n    )\n\n    const liquidityToken = new Token(\n      chainId,\n      Vault.getAddress(tokenAmounts.map(tokenAmount => tokenAmount.token)),\n      18,\n      'PGL',\n      'Pangolin Liquidity'\n    )\n\n    super(chainId, liquidityToken, tokenAmounts)\n\n    this.amp = amp\n  }\n\n  public get reserves_c(): JSBI[] {\n    return this.tokenAmounts.map((tokenAmount: TokenAmount) =>\n      Vault.amount_to_c_amount(tokenAmount.raw, tokenAmount.token.decimals)\n    )\n  }\n\n  public static amount_to_c_amount(amount: JSBI, decimals: number): JSBI {\n    const decimalsBI = JSBI.BigInt(decimals)\n    if (JSBI.lessThanOrEqual(decimalsBI, TARGET_DECIMAL)) {\n      const factor = JSBI.exponentiate(TEN, JSBI.subtract(TARGET_DECIMAL, decimalsBI))\n      return JSBI.multiply(amount, factor)\n    } else {\n      const factor = JSBI.exponentiate(TEN, JSBI.subtract(decimalsBI, TARGET_DECIMAL))\n      return JSBI.divide(amount, factor)\n    }\n  }\n\n  public static c_amount_to_amount(c_amount: JSBI, decimals: number): JSBI {\n    const decimalsBI = JSBI.BigInt(decimals)\n    if (JSBI.lessThanOrEqual(decimalsBI, TARGET_DECIMAL)) {\n      const factor = JSBI.exponentiate(TEN, JSBI.subtract(TARGET_DECIMAL, decimalsBI))\n      return JSBI.divide(c_amount, factor)\n    } else {\n      const factor = JSBI.exponentiate(TEN, JSBI.subtract(decimalsBI, TARGET_DECIMAL))\n      return JSBI.multiply(c_amount, factor)\n    }\n  }\n\n  /**\n   * Returns the swap fee coefficient (x / DIVISOR) for swaps utilizing the vault.\n   * Where (1 - (x/DIVISOR)) of each swap belongs to the LPs\n   */\n  public get swapFeeCoefficient(): JSBI {\n    switch (this.chainId) {\n      default:\n        return JSBI.BigInt(9995) // 0.05%\n    }\n  }\n\n  public get swapFeeDivisor(): JSBI {\n    switch (this.chainId) {\n      default:\n        return JSBI.BigInt(10000)\n    }\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, outputToken: Token): [TokenAmount, Vault] {\n    const in_token_i = this.tokens.indexOf(inputAmount.token)\n    const out_token_i = this.tokens.indexOf(outputToken)\n\n    invariant(in_token_i >= 0 && in_token_i < this.tokenCount, 'TOKEN_IN_I')\n    invariant(out_token_i >= 0 && out_token_i < this.tokenCount, 'TOKEN_OUT_I')\n\n    if (this.reserveOfToken(outputToken).equalTo(ZERO)) {\n      throw new InsufficientReservesError()\n    }\n\n    const c_amounts = this.reserves_c\n\n    const y = this.calc_y(\n      JSBI.BigInt(this.amp),\n      JSBI.add(c_amounts[in_token_i], inputAmount.raw),\n      c_amounts,\n      in_token_i,\n      out_token_i\n    )\n    const dy = JSBI.subtract(c_amounts[out_token_i], y)\n    const outputAmountWithFee = Vault.c_amount_to_amount(\n      JSBI.divide(JSBI.multiply(dy, this.swapFeeCoefficient), this.swapFeeDivisor),\n      outputToken.decimals\n    )\n\n    if (JSBI.equal(outputAmountWithFee, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const newTokenAmounts = this.tokenAmounts\n    newTokenAmounts[in_token_i] = newTokenAmounts[in_token_i].add(inputAmount)\n    newTokenAmounts[out_token_i] = newTokenAmounts[out_token_i].subtract(\n      new TokenAmount(outputToken, outputAmountWithFee)\n    )\n\n    const newOutputTokenReserve_c = Vault.amount_to_c_amount(newTokenAmounts[out_token_i].raw, outputToken.decimals)\n    invariant(JSBI.greaterThanOrEqual(newOutputTokenReserve_c, MIN_RESERVE), 'MIN_RESERVE')\n\n    return [new TokenAmount(outputToken, outputAmountWithFee), new Vault(newTokenAmounts, this.amp, this.chainId)]\n  }\n\n  public getInputAmount(_outputToken: TokenAmount, _inputToken: Token): [TokenAmount, Vault] {\n    throw new MethodNotSupported()\n  }\n\n  // Depositing X tokens for ? liquidity shares\n  public getLiquidityMinted(totalSupply: TokenAmount, depositTokenAmounts: TokenAmount[]): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(depositTokenAmounts.length <= this.tokenCount, 'LIQUIDITY_TOKENS')\n\n    const deposit_c_amounts: JSBI[] = []\n    for (let i = 0; i < this.tokenCount; i++) {\n      const deposit = depositTokenAmounts[i]\n      if (deposit) {\n        invariant(this.involvesToken(deposit.token), 'LIQUIDITY_TOKENS')\n        deposit_c_amounts[i] = Vault.amount_to_c_amount(deposit.raw, deposit.token.decimals)\n      } else {\n        deposit_c_amounts[i] = ZERO\n      }\n    }\n\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      const d_0 = this.calc_d(this.amp, deposit_c_amounts)\n      return new TokenAmount(this.liquidityToken, d_0)\n    }\n\n    const n = this.tokenCount\n    const old_c_amounts = this.reserves_c\n    const d_0 = this.calc_d(this.amp, old_c_amounts)\n    let new_c_amounts = []\n    for (let i = 0; i < n; i++) {\n      new_c_amounts[i] = JSBI.add(old_c_amounts[i], deposit_c_amounts[i])\n    }\n    const d_1 = this.calc_d(this.amp, new_c_amounts)\n\n    if (JSBI.lessThanOrEqual(d_1, d_0)) throw new Error(`D1 need less then or equal to D0.`)\n\n    for (let i = 0; i < n; i++) {\n      const ideal_balance = JSBI.divide(JSBI.multiply(old_c_amounts[i], d_1), d_0)\n      const difference = abs(JSBI.subtract(ideal_balance, new_c_amounts[i]))\n      const fee = this.normalized_trade_fee(n, difference)\n      new_c_amounts[i] = JSBI.subtract(new_c_amounts[i], fee)\n    }\n    const d_2 = this.calc_d(this.amp, new_c_amounts)\n\n    if (JSBI.lessThan(d_1, d_2)) throw new Error(`D2 need less then D1.`)\n    if (JSBI.lessThanOrEqual(d_2, d_0)) throw new Error(`D1 need less then or equal to D0.`)\n\n    const mint_shares = JSBI.divide(JSBI.multiply(totalSupply.raw, JSBI.subtract(d_2, d_0)), d_0)\n\n    return new TokenAmount(this.liquidityToken, mint_shares)\n  }\n\n  // Redeeming X liquidity shares for ? (all) tokens\n  public getLiquidityValues(totalSupply: TokenAmount, shares: TokenAmount): TokenAmount[] {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(shares.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(shares.raw, totalSupply.raw), 'LIQUIDITY')\n\n    const liquidityTokenValues = []\n    const c_amounts = this.reserves_c\n\n    for (let i = 0; i < this.tokenCount; i++) {\n      const amount = JSBI.equal(totalSupply.raw, ZERO)\n        ? ZERO\n        : JSBI.divide(JSBI.multiply(this.tokenAmounts[i].raw, shares.raw), totalSupply.raw)\n      const amount_c = Vault.amount_to_c_amount(amount, this.tokenAmounts[i].token.decimals)\n      const remaining_amount_c = JSBI.subtract(c_amounts[i], amount_c)\n      invariant(JSBI.greaterThanOrEqual(remaining_amount_c, MIN_RESERVE), 'MIN_RESERVE')\n      liquidityTokenValues[i] = new TokenAmount(this.tokenAmounts[i].token, amount)\n    }\n\n    return liquidityTokenValues\n  }\n\n  // Withdrawing X tokens in exchange for ? liquidity shares\n  public getLiquidityValuesByTokens(totalSupply: TokenAmount, withdrawTokenAmounts: TokenAmount[]): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(withdrawTokenAmounts.length <= this.tokenCount, 'LIQUIDITY_TOKENS')\n\n    const removed_c_amounts: JSBI[] = []\n    for (let i = 0; i < this.tokenCount; i++) {\n      const withdrawal = withdrawTokenAmounts[i]\n      if (withdrawal) {\n        invariant(this.involvesToken(withdrawal.token), 'LIQUIDITY_TOKENS')\n        removed_c_amounts[i] = Vault.amount_to_c_amount(withdrawal.raw, withdrawal.token.decimals)\n      } else {\n        removed_c_amounts[i] = ZERO\n      }\n    }\n\n    const old_c_amounts = this.reserves_c\n    const pool_token_supply = totalSupply\n\n    const token_num = old_c_amounts.length\n    const d_0 = this.calc_d(this.amp, old_c_amounts)\n    let c_amounts = []\n    for (let i = 0; i < old_c_amounts.length; i++) {\n      c_amounts[i] = JSBI.subtract(old_c_amounts[i], removed_c_amounts[i])\n      invariant(JSBI.greaterThanOrEqual(c_amounts[i], MIN_RESERVE), 'MIN_RESERVE')\n    }\n    const d_1 = this.calc_d(this.amp, c_amounts)\n    if (d_1 >= d_0) throw new Error(`D1 need less then or equal to D0.`)\n    for (let i = 0; i < token_num; i++) {\n      const ideal_balance = JSBI.divide(JSBI.multiply(old_c_amounts[i], d_1), d_0)\n      const difference = abs(JSBI.subtract(ideal_balance, c_amounts[i]))\n      const fee = this.normalized_trade_fee(token_num, difference)\n      c_amounts[i] = JSBI.subtract(c_amounts[i], fee)\n    }\n    const d_2 = this.calc_d(this.amp, c_amounts)\n    if (d_2 > d_1) throw new Error(`D2 need less then D1.`)\n    if (d_1 >= d_0) throw new Error(`D1 need less then or equal to D0.`)\n    const burn_shares = JSBI.divide(JSBI.multiply(pool_token_supply.raw, JSBI.subtract(d_0, d_2)), d_0)\n\n    return new TokenAmount(this.liquidityToken, burn_shares)\n  }\n\n  private calc_y(amp: JSBI, x_c_amount: JSBI, c_amounts: JSBI[], in_token_i: number, out_token_i: number): JSBI {\n    const n = c_amounts.length\n    const n_jsbi = JSBI.BigInt(n)\n    const nn = JSBI.exponentiate(n_jsbi, n_jsbi)\n    const ann = JSBI.multiply(amp, nn)\n    const d = this.calc_d(amp, c_amounts)\n    let s = x_c_amount\n    let c = JSBI.divide(JSBI.multiply(d, d), x_c_amount)\n    for (let i = 0; i < n; i++) {\n      if (i !== in_token_i && i !== out_token_i) {\n        s = JSBI.add(s, c_amounts[i])\n        c = JSBI.divide(JSBI.multiply(c, d), c_amounts[i])\n      }\n    }\n    c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(ann, nn))\n    const b = JSBI.add(JSBI.divide(d, ann), s)\n    let y_prev = ZERO\n    let y = d\n    for (let i = 0; i < 256; i++) {\n      y_prev = y\n      const y_numerator = JSBI.add(JSBI.exponentiate(y, TWO), c)\n      const y_denominator = JSBI.subtract(JSBI.add(JSBI.multiply(y, TWO), b), d)\n      y = JSBI.divide(y_numerator, y_denominator)\n      if (JSBI.lessThanOrEqual(abs(JSBI.subtract(y, y_prev)), ONE)) break\n    }\n    return y\n  }\n\n  private calc_d(amp: JSBI, c_amounts: JSBI[]): JSBI {\n    const n = c_amounts.length\n    const n_jsbi = JSBI.BigInt(n)\n    const nn = JSBI.exponentiate(n_jsbi, n_jsbi)\n    let sum_amounts = ZERO\n    for (const current_amount of c_amounts) {\n      sum_amounts = JSBI.add(sum_amounts, current_amount)\n    }\n    let d_prev = ZERO\n    let d = sum_amounts\n    for (let i = 0; i < 256; i++) {\n      let d_prod = d\n      for (let current_amount of c_amounts) {\n        d_prod = JSBI.divide(JSBI.multiply(d_prod, d), JSBI.multiply(current_amount, n_jsbi))\n      }\n      d_prev = d\n      const ann = JSBI.multiply(amp, nn)\n      const numerator = JSBI.multiply(d_prev, JSBI.add(JSBI.multiply(d_prod, n_jsbi), JSBI.multiply(ann, sum_amounts)))\n      const denominator = JSBI.add(\n        JSBI.multiply(d_prev, JSBI.subtract(ann, ONE)),\n        JSBI.multiply(d_prod, JSBI.add(n_jsbi, ONE))\n      )\n      d = JSBI.divide(numerator, denominator)\n      if (JSBI.lessThanOrEqual(abs(JSBI.subtract(d, d_prev)), ONE)) break\n    }\n    return d\n  }\n\n  private normalized_trade_fee(n: number, amount: JSBI): JSBI {\n    const trade_fee = JSBI.toNumber(JSBI.subtract(this.swapFeeDivisor, this.swapFeeCoefficient))\n    const adjusted_trade_fee = JSBI.BigInt(Math.floor((trade_fee * n) / (4 * (n - 1))))\n    return JSBI.divide(JSBI.multiply(amount, adjusted_trade_fee), this.swapFeeDivisor)\n  }\n}\n","import { TradeType, ZERO, ZERO_ADDRESS } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, CAVAX, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const chainId = trade.chainId\n    const etherIn = trade.inputAmount.currency === CAVAX[chainId]\n    const etherOut = trade.outputAmount.currency === CAVAX[chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const feeToDaaS: string = validateAndParseAddress(trade.feeTo)\n    const isDaaS = Boolean(feeToDaaS !== ZERO_ADDRESS && !trade.fee.equalTo(ZERO))\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer\n            ? 'swapExactAVAXForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactAVAXForTokens'\n          args = isDaaS ? [amountOut, path, to, deadline, feeToDaaS] : [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForAVAXSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForAVAX'\n          args = isDaaS\n            ? [amountIn, amountOut, path, to, deadline, feeToDaaS]\n            : [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          args = isDaaS\n            ? [amountIn, amountOut, path, to, deadline, feeToDaaS]\n            : [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapAVAXForExactTokens'\n          args = isDaaS ? [amountOut, path, to, deadline, feeToDaaS] : [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactAVAX'\n          args = isDaaS\n            ? [amountOut, amountIn, path, to, deadline, feeToDaaS]\n            : [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          args = isDaaS\n            ? [amountOut, amountIn, path, to, deadline, feeToDaaS]\n            : [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pools'\nimport IPangolinPair from '@pangolindex/exchange-contracts/artifacts/contracts/pangolin-core/PangolinPair.sol/PangolinPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './chains'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId = ChainId.AVALANCHE,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, tokenA.chainId)\n    const [reserves0, reserves1] = await new Contract(address, IPangolinPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), tokenA.chainId)\n  }\n}\n"],"names":["ChainId","StakingType","AirdropType","ChefType","TradeType","Rounding","ETHEREUM_MAINNET","id","chain_id","name","symbol","mainnet","evm","logo","pangolin_is_live","tracked_by_debank","supported_by_gelato","rpc_uri","coingecko_id","nativeCurrency","decimals","blockExplorerUrls","ARBITRUM_MAINNET","ARBITRUM_RINKEBY","AURORA_MAINNET","AURORA_TESTNET","AVALANCHE_MAINNET","png_symbol","subgraph","exchange","debank_pangolin_id","contracts","png","factory","router","router_daas","wrapped_native_token","local_multisig","community_treasury","treasury_vester","mini_chef","address","active","type","MINI_CHEF_V2","airdrop","LEGACY","timelock","governor","migrator","multicall","staking","reward_token","AVALANCHE_FUJI","revenue_distributor","fee_collector","BOBA_MAINNET","BITTORRENT_MAINNET","BSC_MAINNET","BSC_TESTNET","CELO_MAINNET","CELO_ALFAJORES_TESTNET","CELO_BAKLAVA_TESTNET","CRONOS_MAINNET","CRONOS_TESTNET","COSTON_TESTNET","PANGO_CHEF","MERKLE_TO_STAKING","SAR_POSITIONS","EVMOS_TESTNET","EVMOS_MAINNET","FANTOM_MAINNET","FANTOM_TESTNET","FUSE_MAINNET","FUSE_TESTNET","HARMONY_MAINNET","HARMONY_TESTNET","HECO_MAINNET","HECO_TESTNET","KLAYTN_MAINNET","KLAYTN_BAOBAB","METIS_MAINNET","METIS_RINKEBY","MOONRIVER_MAINNET","MOONBEAM_MAINNET","MOONBEAM_MOONBASE","NEAR_MAINNET","NEAR_CHEF","NEAR_AIRDROP","NEAR_TESTNET","OEC_MAINNET","OEC_TESTNET","OP_MAINNET","OP_KOVAN","POLYGON_MAINNET","POLYGON_MUMBAI","foundation_multisig","joint_multisig","SONGBIRD_CANARY","WAGMI_FUJI_SUBNET","XDAI_MAINNET","EWC_MAINNET","EWC_TESTNET","IOTEX_MAINNET","IOTEX_TESTNET","ASTAR_MAINNET","SHIDEN_MAINNET","SHIBUYA_TESTNET","TELOS_MAINNET","TELOS_TESTNET","OASIS_MAINNET","OASIS_TESTNET","GODWOKEN_MAINNET","GODWOKEN_TESTNET","CHAINS","FUJI","AVALANCHE","WAGMI","COSTON","SONGBIRD","ALL_CHAINS","SolidityType","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO_ADDRESS","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_998","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","MethodNotSupported","_this3","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","abs","multiply","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","CAVAX","Token","chainId","shouldValidateAddress","_CHAINS$chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WAVAX","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pools","entries","i","priceOf","path","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","Route","input","output","hops","every","pool","tokenCount","involvesToken","wrappedOutput","inputToken","outputToken","midPrice","_100_PERCENT","Percent","ZERO_PERCENT","inputOutputComparator","a","b","inputAmount","outputAmount","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","fee","feeTo","fullOutputAmount","exactQuote","slippage","amounts","Array","nextPools","EXACT_INPUT","getOutputAmount","nextPool","userReceivedAmountOut","fullOutputQuantity","getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","daasOptions","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPools","currentHops","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenIn","tokenOut","reserves","some","reserve","concat","tokens","tokenHop","poolsExcludingThisPool","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","Pool","liquidityToken","tokenAmounts","addresses","map","tokenAmount","indexOf","index","tokenIndex","findIndex","reserveOfIndex","reserveOfToken","baseToken","quoteToken","Pair","tokenAmountA","tokenAmountB","includes","_Pool","tokenA","tokenB","getCreate2Address","keccak256","pack","reserve0","reserve1","inputReserve","outputReserve","token0","token1","inputAmountWithFee","swapFeeCoefficient","swapFeeDivisor","getLiquidityMinted","totalSupply","depositTokenAmounts","liquidity","amount0","amount1","getLiquidityValues","options","totalSupplyAdjusted","feeOn","kLast","kLastParsed","rootK","rootKLast","feeLiquidity","TARGET_DECIMAL","MIN_RESERVE","Vault","amp","join","amount_to_c_amount","decimalsBI","factor","c_amount_to_amount","c_amount","in_token_i","out_token_i","c_amounts","reserves_c","calc_y","dy","outputAmountWithFee","newTokenAmounts","newOutputTokenReserve_c","_outputToken","_inputToken","deposit_c_amounts","deposit","d_0","calc_d","n","old_c_amounts","new_c_amounts","d_1","ideal_balance","difference","normalized_trade_fee","d_2","mint_shares","shares","liquidityTokenValues","amount_c","remaining_amount_c","getLiquidityValuesByTokens","withdrawTokenAmounts","removed_c_amounts","withdrawal","pool_token_supply","token_num","burn_shares","x_c_amount","n_jsbi","nn","ann","d","s","c","y_prev","y_numerator","y_denominator","sum_amounts","d_prev","d_prod","current_amount","trade_fee","toNumber","adjusted_trade_fee","Math","floor","toHex","Router","swapCallParameters","trade","etherIn","etherOut","ttl","methodName","args","feeToDaaS","isDaaS","Boolean","to","recipient","allowedSlippage","deadline","Date","getTime","useFeeOnTransfer","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE2","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE3","fetchPairData","IPangolinPair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}