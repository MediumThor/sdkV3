{"version":3,"file":"sdk.cjs.development.js","sources":["../src/chains.ts","../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/pools/pool.ts","../src/entities/pools/pair.ts","../src/entities/pools/vault.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["export enum ChainId {\n  FUJI = 43113,\n  AVALANCHE = 43114,\n  WAGMI = 11111,\n  COSTON = 16,\n  SONGBIRD = 19,\n  NEAR_MAINNET = 329847900,\n  NEAR_TESTNET = 329847901\n}\n\nexport enum StakingType {\n  LEGACY = 'LEGACY',\n  SAR_POSITIONS = 'SAR_POSITIONS',\n  NEAR_STAKING = 'NEAR_STAKING'\n}\n\ninterface StakingContract {\n  address: string\n  active: boolean\n  reward_token: string\n  type: StakingType\n}\n\nexport enum AirdropType {\n  LEGACY = 'LEGACY',\n  MERKLE = 'MERKLE',\n  MERKLE_TO_STAKING = 'MERKLE_TO_STAKING',\n  NEAR_AIRDROP = 'NEAR_AIRDROP'\n}\n\ninterface AirdropContract {\n  address: string\n  active: boolean\n  type: AirdropType\n}\n\nexport enum ChefType {\n  MINI_CHEF = 'MINI_CHEF',\n  MINI_CHEF_V2 = 'MINI_CHEF_V2',\n  PANGO_CHEF = 'PANGO_CHEF',\n  NEAR_CHEF = 'NEAR_CHEF'\n}\n\ninterface ChefContract {\n  address: string\n  active: boolean\n  type: ChefType\n}\n\nexport interface Chain {\n  id: string\n  name: string\n  chain_id?: number\n  mainnet: boolean\n  evm: boolean\n  pangolin_is_live: boolean\n  tracked_by_debank: boolean\n  supported_by_gelato: boolean\n  rpc_uri: string\n  subgraph?: {\n    exchange: string\n  }\n  symbol: string\n  nativeCurrency: {\n    name: string\n    symbol: string\n    decimals: number\n  }\n  blockExplorerUrls?: string[]\n  png_symbol?: string\n  logo?: string\n  coingecko_id?: string\n  debank_pangolin_id?: string\n  contracts?: {\n    png: string\n    factory: string\n    router: string\n    router_daas?: string\n    wrapped_native_token: string\n    local_multisig?: string\n    community_treasury?: string\n    treasury_vester?: string\n    mini_chef?: ChefContract\n    timelock?: string\n    migrator?: string\n    airdrop?: AirdropContract\n    foundation_multisig?: string\n    joint_multisig?: string\n    revenue_distributor?: string\n    governor?: string\n    fee_collector?: string\n    multicall: string\n    staking?: StakingContract[]\n  }\n}\n\nexport const ETHEREUM_MAINNET: Chain = {\n  id: 'ethereum_mainnet',\n  chain_id: 1,\n  name: 'Ethereum',\n  symbol: 'ETH',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/eth.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\n  coingecko_id: 'ethereum',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://etherscan.io']\n}\n\nexport const ARBITRUM_MAINNET: Chain = {\n  id: 'arbitrum_mainnet',\n  chain_id: 42161,\n  name: 'Arbitrum',\n  symbol: 'ARB',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/arb.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://arb1.arbitrum.io/rpc',\n  coingecko_id: 'arbitrum-one',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://arbiscan.io']\n}\n\nexport const ARBITRUM_RINKEBY: Chain = {\n  id: 'arbitrum_rinkeby',\n  chain_id: 421611,\n  name: 'Arbitrum Rinkbey',\n  symbol: 'ARB',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/arb.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rinkeby.arbitrum.io/rpc',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://rinkeby-explorer.arbitrum.io']\n}\n\nexport const AURORA_MAINNET: Chain = {\n  id: 'aurora_mainnet',\n  chain_id: 1313161554,\n  name: 'Aurora',\n  symbol: 'AURORA',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/aurora.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.aurora.dev',\n  coingecko_id: 'aurora',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://aurorascan.dev']\n}\n\nexport const AURORA_TESTNET: Chain = {\n  id: 'aurora_testnet',\n  chain_id: 1313161555,\n  name: 'Aurora Testnet',\n  symbol: 'AURORA',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/aurora.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.aurora.dev',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.aurorascan.dev']\n}\n\nexport const AVALANCHE_MAINNET: Chain = {\n  id: 'avalanche_mainnet',\n  chain_id: 43114,\n  name: 'Avalanche',\n  symbol: 'AVAX',\n  png_symbol: 'PNG',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/avax.png',\n  pangolin_is_live: true,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://api.avax.network/ext/bc/C/rpc',\n  subgraph: {\n    exchange: 'https://api.thegraph.com/subgraphs/name/pangolindex/exchange'\n  },\n  coingecko_id: 'avalanche',\n  debank_pangolin_id: 'avax_pangolin',\n  contracts: {\n    png: '0x60781C2586D68229fde47564546784ab3fACA982',\n    factory: '0xefa94DE7a4656D787667C749f7E1223D71E9FD88',\n    router: '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106',\n    router_daas: '0xEfd958c7C68b7e6a88300E039cAE275ca741007F',\n    wrapped_native_token: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    local_multisig: '0x66c048d27aFB5EE59E4C07101A483654246A4eda',\n    community_treasury: '0x650f5865541f6D68BdDFE977dB933C293EA72358',\n    treasury_vester: '0x6747AC215dAFfeE03a42F49FebB6ab448E12acEe',\n    mini_chef: {\n      address: '0x1f806f7C8dED893fd3caE279191ad7Aa3798E928',\n      active: true,\n      type: ChefType.MINI_CHEF_V2\n    },\n    airdrop: {\n      address: '0x0C58C2041da4CfCcF5818Bbe3b66DBC23B3902d9',\n      active: false,\n      type: AirdropType.LEGACY\n    },\n    timelock: '0xEB5c91bE6Dbfd30cf616127C2EA823C64e4b1ff8',\n    governor: '0xb0Ff2b1047d9E8d294c2eD798faE3fA817F43Ee1',\n    migrator: '0x4b23Aa72A1214d0E4fd3f2c8Da7C6ba660F7483C',\n    multicall: '0x0FB54156B496b5a040b51A71817aED9e2927912E',\n    staking: [\n      {\n        address: '0x88afdaE1a9F58Da3E68584421937E5F564A0135b',\n        active: true,\n        reward_token: '0x60781C2586D68229fde47564546784ab3fACA982',\n        type: StakingType.LEGACY\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'Avalanche',\n    symbol: 'AVAX',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://snowtrace.io']\n}\n\nexport const AVALANCHE_FUJI: Chain = {\n  id: 'avalanche_fuji',\n  chain_id: 43113,\n  name: 'Avalanche Fuji',\n  symbol: 'AVAX',\n  png_symbol: 'fujiPNG',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/avax.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://api.avax-test.network/ext/bc/C/rpc',\n  contracts: {\n    png: '0xAF5D473b3f8F96A5B21c6bbB97e09b491335acb9',\n    factory: '0x2a496ec9e9bE22e66C61d4Eb9d316beaEE31A77b',\n    router: '0x688d21b0B8Dc35971AF58cFF1F7Bf65639937860',\n    router_daas: '0xFE97f59B72eEE0F29F93e12195C6F35DCdAB6899',\n    wrapped_native_token: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    timelock: '0xf4C589029be33cc4e4056B125794B35A2dF23136',\n    mini_chef: {\n      address: '0x2572ECa2be804f7799e3f3Ef1D1db60F512a0Ae3',\n      active: true,\n      type: ChefType.MINI_CHEF_V2\n    },\n    community_treasury: '0x3a6e244678f392638876A92DAAa3C56e02dC1080',\n    airdrop: {\n      address: '0x630CC51306B1E2cf149B7F7a15F78bCD006A5D65',\n      active: false,\n      type: AirdropType.LEGACY\n    },\n    treasury_vester: '0xee82a2695c1ae2cCFC3DDDa643836Ff5E55Fa1e1',\n    revenue_distributor: '0xF3861Acb8061A70499DC85c4a6aA9E934C83049f',\n    fee_collector: '0x0609ce4F16388c440BF9a84b5E8df1b0438F714A',\n    multicall: '0xb465Fd2d9C71d5D6e6c069aaC9b4E21c69aAA78f',\n    staking: [\n      {\n        address: '0x5610E572c9f2a10BFd15861061F8B1Fe75e05b23',\n        active: true,\n        reward_token: '0xAF5D473b3f8F96A5B21c6bbB97e09b491335acb9',\n        type: StakingType.LEGACY\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'Avalanche',\n    symbol: 'AVAX',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.snowtrace.io']\n}\n\nexport const BOBA_MAINNET: Chain = {\n  id: 'boba_mainnet',\n  chain_id: 288,\n  name: 'Boba',\n  symbol: 'BOBA',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/boba.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.boba.network',\n  coingecko_id: 'boba',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://blockexplorer.boba.network']\n}\n\nexport const BITTORRENT_MAINNET: Chain = {\n  id: 'bittorrent_mainnet',\n  chain_id: 199,\n  name: 'BitTorrent',\n  symbol: 'BTT',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/btt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.bt.io',\n  nativeCurrency: {\n    name: 'BitTorrent',\n    symbol: 'BTT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://scan.bt.io']\n}\n\nexport const BITTORRENT_TESTNET: Chain = {\n  id: 'bittorrent_testnet',\n  chain_id: 1028,\n  name: 'BitTorrent Testnet',\n  symbol: 'BTT',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/btt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://test-rpc.bittorrentchain.io',\n  nativeCurrency: {\n    name: 'BitTorrent',\n    symbol: 'BTT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://scan.bittorrentchain.io']\n}\n\nexport const BSC_MAINNET: Chain = {\n  id: 'bsc_mainnet',\n  chain_id: 56,\n  name: 'Binance',\n  symbol: 'BSC',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/bsc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://bsc-dataseed.binance.org',\n  coingecko_id: 'binance-smart-chain',\n  nativeCurrency: {\n    name: 'Binance Coin',\n    symbol: 'BNB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://bscscan.com']\n}\n\nexport const BSC_TESTNET: Chain = {\n  id: 'bsc_testnet',\n  chain_id: 97,\n  name: 'Binance Testnet',\n  symbol: 'BSC',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/bsc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://data-seed-prebsc-1-s1.binance.org:8545',\n  nativeCurrency: {\n    name: 'Binance Coin',\n    symbol: 'BNB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.bscscan.com']\n}\n\nexport const CELO_MAINNET: Chain = {\n  id: 'celo_mainnet',\n  chain_id: 42220,\n  name: 'Celo',\n  symbol: 'CELO',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://forno.celo.org',\n  coingecko_id: 'celo',\n  nativeCurrency: {\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.celo.org']\n}\n\nexport const CELO_ALFAJORES_TESTNET: Chain = {\n  id: 'celo_alfadores_testnet',\n  chain_id: 44787,\n  name: 'Celo Alfajores',\n  symbol: 'CELO',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://alfajores-forno.celo-testnet.org',\n  nativeCurrency: {\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://alfajores-blockscout.celo-testnet.org']\n}\n\nexport const CELO_BAKLAVA_TESTNET: Chain = {\n  id: 'celo_baklava_testnet',\n  chain_id: 62320,\n  name: 'Celo Baklava',\n  symbol: 'CELO',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://baklava-forno.celo-testnet.org',\n  nativeCurrency: {\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://baklava-blockscout.celo-testnet.org']\n}\n\nexport const CRONOS_MAINNET: Chain = {\n  id: 'cronos_mainnet',\n  chain_id: 25,\n  name: 'Cronos',\n  symbol: 'CRO',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/cro.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://evm-cronos.crypto.org',\n  coingecko_id: 'cronos',\n  nativeCurrency: {\n    name: 'Cronos',\n    symbol: 'CRO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://cronos.org/explorer']\n}\n\nexport const CRONOS_TESTNET: Chain = {\n  id: 'cronos_testnet',\n  chain_id: 338,\n  name: 'Cronos',\n  symbol: 'CRO',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/cro.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://cronos-testnet-3.crypto.org:8545',\n  nativeCurrency: {\n    name: 'Cronos',\n    symbol: 'CRO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://cronos.org/explorer/testnet3']\n}\n\nexport const COSTON_TESTNET: Chain = {\n  id: 'coston_testnet',\n  chain_id: 16,\n  name: 'Coston',\n  symbol: 'cFLR',\n  png_symbol: 'PCT',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/flare.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://coston-api.flare.network/ext/bc/C/rpc',\n  contracts: {\n    png: '0x0A8744c2a48b0e09a3e4C3A381A8E0d8d900bAFe',\n    factory: '0xa5D4D920cea39f0344A99b2a3c4597E10DA16D88',\n    router: '0x6a6C605700f477E56B9542Ca2a3D68B9A7edf599',\n    wrapped_native_token: '0x1659941d425224408c5679eeef606666c7991a8A',\n    local_multisig: '0x177126EC2D5BabD6a1374135F082b875773afC45',\n    community_treasury: '0x48197135bA4a9F5F9aB1296A6405c9495AB4Cfd3',\n    treasury_vester: '0x1a6a55a22a696F757f0ade055200308B53D70CAc',\n    mini_chef: {\n      address: '0xFf0C4041ba52428612320cAD2016d07B2e4A802D',\n      active: true,\n      type: ChefType.PANGO_CHEF\n    },\n    airdrop: {\n      address: '0x700E2E6fd3C5174E9691a65DC12f44d0A8dd25EC',\n      active: true,\n      type: AirdropType.MERKLE_TO_STAKING\n    },\n    timelock: '0xc63C2BA9F4dD17F881d9195fD105611760689bAe',\n    fee_collector: '0x39DEA895DA8cC6ef744Da4C5Cc06F1E6150362f1',\n    multicall: '0xF7aB82e5253F65496e21dF0dacfA6D5e765b4874',\n    staking: [\n      {\n        address: '0xc064943492c9DF4f8238Bf52E7B7170A0Ec6FBAF',\n        active: true,\n        reward_token: '0x0A8744c2a48b0e09a3e4C3A381A8E0d8d900bAFe',\n        type: StakingType.SAR_POSITIONS\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'CostonFlare',\n    symbol: 'CFLR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://coston-explorer.flare.network']\n}\n\nexport const EVMOS_TESTNET: Chain = {\n  id: 'evmos_testnet',\n  chain_id: 9000,\n  name: 'EVMOS Testnet',\n  symbol: 'tEVMOS',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/evmos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://eth.bd.evmos.dev:8545',\n  nativeCurrency: {\n    name: 'EVMOS',\n    symbol: 'EVMOS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://evm.evmos.dev']\n}\n\nexport const EVMOS_MAINNET: Chain = {\n  id: 'evmos_mainnet',\n  chain_id: 9001,\n  name: 'EVMOS',\n  symbol: 'EVMOS',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/evmos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://eth.bd.evmos.org:8545',\n  nativeCurrency: {\n    name: 'EVMOS',\n    symbol: 'EVMOS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://evm.evmos.org']\n}\n\nexport const FANTOM_MAINNET: Chain = {\n  id: 'fantom_mainnet',\n  chain_id: 250,\n  name: 'Fantom',\n  symbol: 'FTM',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ftm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rpc.ftm.tools',\n  coingecko_id: 'fantom',\n  nativeCurrency: {\n    name: 'Fantom',\n    symbol: 'FTM',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://ftmscan.com']\n}\n\nexport const FANTOM_TESTNET: Chain = {\n  id: 'fantom_testnet',\n  chain_id: 4002,\n  name: 'Fantom',\n  symbol: 'FTM',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ftm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rpc.testnet.fantom.network',\n  nativeCurrency: {\n    name: 'Fantom',\n    symbol: 'FTM',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.ftmscan.com']\n}\n\nexport const FUSE_MAINNET: Chain = {\n  id: 'fuse_mainnet',\n  chain_id: 122,\n  name: 'Fuse',\n  symbol: 'FUSE',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/fuse.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.fuse.io',\n  coingecko_id: 'fuse',\n  nativeCurrency: {\n    name: 'Fuse',\n    symbol: 'FUSE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['http://explorer.fuse.io']\n}\n\nexport const FUSE_TESTNET: Chain = {\n  id: 'fuse_testnet',\n  chain_id: 123,\n  name: 'Fuse',\n  symbol: 'FUSE',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/fuse.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.fusespark.io',\n  nativeCurrency: {\n    name: 'Fuse',\n    symbol: 'FUSE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.fusespark.io']\n}\n\nexport const HARMONY_MAINNET: Chain = {\n  id: 'harmony_mainnet',\n  chain_id: 1666600000,\n  name: 'Harmony',\n  symbol: 'ONE',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/one.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.harmony.one',\n  coingecko_id: 'harmony-shard-0',\n  nativeCurrency: {\n    name: 'Harmony',\n    symbol: 'ONE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.harmony.one']\n}\n\nexport const HARMONY_TESTNET: Chain = {\n  id: 'harmony_testnet',\n  chain_id: 1666700000,\n  name: 'Harmony Testnet',\n  symbol: 'ONE',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/one.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.s0.b.hmny.io',\n  nativeCurrency: {\n    name: 'Harmony',\n    symbol: 'ONE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.pops.one']\n}\n\nexport const HECO_MAINNET: Chain = {\n  id: 'heco_mainnet',\n  chain_id: 128,\n  name: 'Heco',\n  symbol: 'HECO',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/heco.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://http-mainnet.hecochain.com',\n  coingecko_id: 'huobi-token',\n  nativeCurrency: {\n    name: 'Heco',\n    symbol: 'HECO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://hecoinfo.com']\n}\n\nexport const HECO_TESTNET: Chain = {\n  id: 'heco_testnet',\n  chain_id: 256,\n  name: 'Heco',\n  symbol: 'HECO',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/heco.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://http-testnet.hecochain.com',\n  nativeCurrency: {\n    name: 'Heco',\n    symbol: 'HECO',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://scan-testnet.hecochain.com']\n}\n\nexport const KLAYTN_MAINNET: Chain = {\n  id: 'klaytn_mainnet',\n  chain_id: 8217,\n  name: 'Klaytn',\n  symbol: 'KLAY',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/klay.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://kaikas.cypress.klaytn.net:8651',\n  coingecko_id: 'klay-token',\n  nativeCurrency: {\n    name: 'Klaytn',\n    symbol: 'KLAY',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://scope.klaytn.com']\n}\n\nexport const KLAYTN_BAOBAB: Chain = {\n  id: 'klaytn_baobab',\n  chain_id: 1001,\n  name: 'Klaytn Baobab',\n  symbol: 'KLAY',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/klay.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.baobab.klaytn.net:8651',\n  nativeCurrency: {\n    name: 'Klaytn',\n    symbol: 'KLAY',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://baobab.scope.klaytn.com']\n}\n\nexport const METIS_MAINNET: Chain = {\n  id: 'metis_mainnet',\n  chain_id: 1088,\n  name: 'Metis',\n  symbol: 'METIS',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/metis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://andromeda.metis.io/?owner=1088',\n  coingecko_id: 'metis-andromeda',\n  nativeCurrency: {\n    name: 'Metis',\n    symbol: 'METIS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://andromeda-explorer.metis.io']\n}\n\nexport const METIS_RINKEBY: Chain = {\n  id: 'metis_rinkeby',\n  chain_id: 588,\n  name: 'Metis Rinkeby',\n  symbol: 'METIS',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/metis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://stardust.metis.io/?owner=588',\n  nativeCurrency: {\n    name: 'Metis',\n    symbol: 'tMETIS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://stardust-explorer.metis.io']\n}\n\nexport const MOONRIVER_MAINNET: Chain = {\n  id: 'moonriver_mainnet',\n  chain_id: 1285,\n  name: 'Moonriver',\n  symbol: 'MOVR',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/movr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.moonriver.moonbeam.network',\n  coingecko_id: 'moonriver',\n  nativeCurrency: {\n    name: 'Moonriver',\n    symbol: 'MOVR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://moonriver.moonscan.io']\n}\n\nexport const MOONBEAM_MAINNET: Chain = {\n  id: 'moonbeam_mainnet',\n  chain_id: 1284,\n  name: 'Moonbeam',\n  symbol: 'MOBM',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/mobm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.api.moonbeam.network',\n  coingecko_id: 'moonbeam',\n  nativeCurrency: {\n    name: 'Moonbeam',\n    symbol: 'GLMR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://moonscan.io']\n}\n\nexport const MOONBEAM_MOONBASE: Chain = {\n  id: 'moonbeam_moonbase',\n  chain_id: 1287,\n  name: 'Moonbase',\n  symbol: 'MOONBASE',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/mobm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.api.moonbase.moonbeam.network',\n  nativeCurrency: {\n    name: 'Moonbase',\n    symbol: 'DEV',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://moonbase.moonscan.io']\n}\n\nexport const NEAR_MAINNET: Chain = {\n  id: 'near_mainnet',\n  chain_id: 329847900, // NEAR acutally doesn't have this concept. So this is our naming convention for non EVM chains without Chain IDs\n  name: 'Near',\n  symbol: `NEAR`,\n  mainnet: true,\n  evm: false,\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.mainnet.near.org',\n  png_symbol: 'PNR',\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/near.svg',\n  contracts: {\n    png: 'png-token-v1.testnet',\n    factory: 'example2.near',\n    router: 'example3.near',\n    wrapped_native_token: 'wrap.near',\n    local_multisig: 'example5.near',\n    community_treasury: 'example6.near',\n    treasury_vester: 'example7.near',\n    mini_chef: {\n      address: 'example8.near',\n      active: true,\n      type: ChefType.NEAR_CHEF\n    },\n    airdrop: {\n      address: 'example9.near',\n      active: false,\n      type: AirdropType.NEAR_AIRDROP\n    },\n    timelock: 'example10.near',\n    governor: 'example11.near',\n    migrator: 'example12.near',\n    multicall: ''\n  },\n  nativeCurrency: {\n    name: 'Near',\n    symbol: 'NEAR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.near.org']\n}\n\nexport const NEAR_TESTNET: Chain = {\n  id: 'near_testnet',\n  chain_id: 329847901, // NEAR acutally doesn't have this concept. So this is our naming convention for non EVM chains without Chain IDs\n  name: 'Near',\n  symbol: `NEAR`,\n  mainnet: false,\n  evm: false,\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.testnet.near.org',\n  png_symbol: 'PNR',\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/near.svg',\n  contracts: {\n    png: 'png-token-v1.testnet',\n    factory: 'example2.near',\n    router: 'example3.near',\n    wrapped_native_token: 'wrap.testnet',\n    local_multisig: 'example5.near',\n    community_treasury: 'example6.near',\n    treasury_vester: 'example7.near',\n    mini_chef: {\n      address: 'example8.near',\n      active: true,\n      type: ChefType.NEAR_CHEF\n    },\n    airdrop: {\n      address: 'example9.near',\n      active: false,\n      type: AirdropType.NEAR_AIRDROP\n    },\n    timelock: 'example10.near',\n    governor: 'example11.near',\n    migrator: 'example12.near',\n    multicall: ''\n  },\n  nativeCurrency: {\n    name: 'Near',\n    symbol: 'NEAR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.testnet.near.org']\n}\n\nexport const OEC_MAINNET: Chain = {\n  id: 'oec_mainnet',\n  chain_id: 66,\n  name: 'OEC',\n  symbol: 'OKT',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/okt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://exchainrpc.okex.org',\n  coingecko_id: 'okex-chain',\n  nativeCurrency: {\n    name: 'OEC',\n    symbol: 'OKT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://www.oklink.com/okexchain']\n}\n\nexport const OEC_TESTNET: Chain = {\n  id: 'oec_testnet',\n  chain_id: 65,\n  name: 'OEC Testnet',\n  symbol: 'OKT',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/okt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://exchaintestrpc.okex.org',\n  nativeCurrency: {\n    name: 'OEC',\n    symbol: 'OKT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://www.oklink.com/oec-test']\n}\n\nexport const OP_MAINNET: Chain = {\n  id: 'op_mainnet',\n  chain_id: 10,\n  name: 'Optimism',\n  symbol: 'OP',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/op.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.optimism.io',\n  coingecko_id: 'optimistic-ethereum',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://optimistic.etherscan.io']\n}\n\nexport const OP_KOVAN: Chain = {\n  id: 'op_kovan',\n  chain_id: 69,\n  name: 'Optimism Kovan',\n  symbol: 'OP',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/op.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://kovan.optimism.io',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://kovan-optimistic.etherscan.io']\n}\n\nexport const POLYGON_MAINNET: Chain = {\n  id: 'polygon_mainnet',\n  chain_id: 137,\n  name: 'Polygon',\n  symbol: 'MATIC',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/matic.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://polygon-rpc.com',\n  coingecko_id: 'polygon-pos',\n  nativeCurrency: {\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://polygonscan.com']\n}\n\nexport const POLYGON_MUMBAI: Chain = {\n  id: 'polygon_mumbai',\n  chain_id: 80001,\n  name: 'Polygon Mumbai',\n  symbol: 'MATIC',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/matic.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://matic-mumbai.chainstacklabs.com',\n  contracts: {\n    png: '0x4828a3D98E428e73184374845f23C40eB76bA695',\n    factory: '0xf7b351C98B5585b7aDa089F3fFD0fED785fB6cff',\n    router: '0x680ad00c72B8d55436E2812Df0f5a9Df7675e054',\n    wrapped_native_token: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    local_multisig: '0x2412CF7162500001035B34a4aC4Cf4876B9a6f4b',\n    foundation_multisig: '0x9284868361460C0Ca3dfcDcf035e90F0ea3A72A0',\n    joint_multisig: '0x38F6d835FAF60a891016b2FC5692E76D2c6eEcbF',\n    community_treasury: '0x791d828FA611D5cD086e8047EAa8d7276c8d943E',\n    treasury_vester: '0xFeC5354eF11981D5dAF92F6CA61e618c5AdF4FD5',\n    mini_chef: {\n      address: '0xa34Ad412652267FB3b1261D7d4F351a678B01Bf8',\n      active: true,\n      type: ChefType.MINI_CHEF_V2\n    },\n    airdrop: {\n      address: '0x34338ad5D7fd49B24D07D1D8e8d38Fc64F42f94A',\n      active: false,\n      type: AirdropType.LEGACY\n    },\n    timelock: '0xE6ec3b8AD6ad20210a2698d89016DDF6965E5fBC',\n    revenue_distributor: '0x780A51831dc1cE3AAD2879479dBE9419e834744c',\n    fee_collector: '0xB2FcD54680150e3033A878cf1F689e1256d51fc5',\n    multicall: '',\n    staking: [\n      {\n        address: '0x3AA2baD17b768fFe5F9Fa05Ca95f97959862B41B',\n        active: true,\n        reward_token: '0x4828a3D98E428e73184374845f23C40eB76bA695',\n        type: StakingType.LEGACY\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://mumbai.polygonscan.com']\n}\n\nexport const SONGBIRD_CANARY: Chain = {\n  id: 'songbird_canary',\n  chain_id: 19,\n  name: 'Songbird',\n  symbol: 'SGB',\n  png_symbol: 'PSB',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/sgb.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://sgb.ftso.com.au/ext/bc/C/rpc',\n  contracts: {\n    png: '0xb2987753D1561570f726Aa373F48E77e27aa5FF4',\n    factory: '0xB66E62b25c42D55655a82F8ebf699f2266f329FB',\n    router: '0x6591cf4E1CfDDEcB4Aa5946c033596635Ba6FB0F',\n    wrapped_native_token: '0x02f0826ef6aD107Cfc861152B32B52fD11BaB9ED',\n    local_multisig: '0xe18dFC20edE326930d11b3316E92bdC1F606dc94',\n    community_treasury: '0xA2e6eFFdbb278744E286F602Bfaa2BcDAccBb1AA',\n    treasury_vester: '0x47d3d75E68594960845Bb3fD89f6a73E0Af8093E',\n    mini_chef: {\n      address: '0x76489156Fff6f4B89626f58386366941150642B7',\n      active: true,\n      type: ChefType.PANGO_CHEF\n    },\n    airdrop: {\n      address: '0x1c4429A271ec5E36a2FDc6400A5a6e49E605dF17',\n      active: true,\n      type: AirdropType.MERKLE_TO_STAKING\n    },\n    timelock: '0xF92F8A011A55C243CBAA096A62d9C48880070af6',\n    fee_collector: '0x7d84e8A7c89F84a97a0e190B45E4D2fC27412894',\n    multicall: '0x17032Ea9c3a13Ed337665145364c0d2aD1108c91',\n    staking: [\n      {\n        address: '0x7428A089A79B24400a620F1Cbf8bd0526cFae777',\n        active: true,\n        reward_token: '0xb2987753D1561570f726Aa373F48E77e27aa5FF4',\n        type: StakingType.SAR_POSITIONS\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'Songbird',\n    symbol: 'SGB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://songbird-explorer.flare.network']\n}\n\nexport const FLARE_MAINNET: Chain = {\n  id: 'flare_mainnet',\n  chain_id: 14,\n  name: 'Flare',\n  symbol: 'FLR',\n  png_symbol: 'PFL',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/flare.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://flare-api.flare.network/ext/C/rpc',\n  nativeCurrency: {\n    name: 'Flare',\n    symbol: 'FLR',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://flare-explorer.flare.network']\n}\n\nexport const WAGMI_FUJI_SUBNET: Chain = {\n  id: 'wagmi_fuji_subnet',\n  chain_id: 11111,\n  name: 'Wagmi',\n  symbol: 'WGMI',\n  png_symbol: 'wagmiPNG',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/wgmi.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://subnets.avax.network/wagmi/wagmi-chain-testnet/rpc',\n  contracts: {\n    png: '0xbdf33c7128fBB220fc0e4Be277697cEeef8BdfF5',\n    factory: '0xee2162F7A04f3abA4925BfdC2e262533bd6Be516',\n    router: '0x924ec1B00109D355Bb2Aa045fAC3b08ceB70Fa3d',\n    wrapped_native_token: '0x3Ee7094DADda15810F191DD6AcF7E4FFa37571e4',\n    local_multisig: '0x0000000000000000000000000000000000000000',\n    community_treasury: '0x2CE6B673aDB3032A1694daC7c1F07c345F18Ae2d',\n    treasury_vester: '0x9DB06A311B3c06D0841782BA0D5004CDEA96e21A',\n    mini_chef: {\n      address: '0x3014526b462ceef5734d9AaAe24321769E59269a',\n      active: true,\n      type: ChefType.MINI_CHEF_V2\n    },\n    airdrop: {\n      address: '0x0BD8b5D5FF2d4FCcDf7782Af15368FcAFE040Bd1',\n      active: false,\n      type: AirdropType.LEGACY\n    },\n    timelock: '0x2d41E2CDf9E74686d89e4A0BeA5dD4D01F7D134e',\n    governor: '0x0000000000000000000000000000000000000000',\n    migrator: '0x0000000000000000000000000000000000000000',\n    multicall: '0x5138349f3027F1e2c2f10eDAD83d38096C0D8Abe',\n    staking: [\n      {\n        address: '0x4C08b0D7F51A27db7baFb8Dc4632494Df8d53Af8',\n        active: true,\n        reward_token: '0xbdf33c7128fBB220fc0e4Be277697cEeef8BdfF5',\n        type: StakingType.LEGACY\n      },\n      {\n        address: '0xf9E3691617151969f30b0Da57AA0c9f4698ef6ab',\n        active: true,\n        reward_token: '0xbdf33c7128fBB220fc0e4Be277697cEeef8BdfF5',\n        type: StakingType.SAR_POSITIONS\n      }\n    ]\n  },\n  nativeCurrency: {\n    name: 'Wagmi',\n    symbol: 'WGMI',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://subnets.avax.network/wagmi/wagmi-chain-testnet/explorer']\n}\n\nexport const XDAI_MAINNET: Chain = {\n  id: 'xdai_mainnet',\n  chain_id: 100,\n  name: 'Gnosis',\n  symbol: 'XDAI',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/xdai.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.xdaichain.com',\n  coingecko_id: 'xdai',\n  nativeCurrency: {\n    name: 'Gnosis',\n    symbol: 'xDAI',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://blockscout.com/xdai/mainnet']\n}\n\nexport const EWC_MAINNET: Chain = {\n  id: 'ewc_mainnet',\n  chain_id: 246,\n  name: 'Energy Web Chain',\n  symbol: 'EWT',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ewc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.energyweb.org',\n  nativeCurrency: {\n    name: 'Energy Web Token',\n    symbol: 'EWT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['http://explorer.energyweb.org']\n}\n\nexport const EWC_TESTNET: Chain = {\n  id: 'ewc_testnet',\n  chain_id: 73799,\n  name: 'Volta',\n  symbol: 'VT',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ewc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://volta-rpc.energyweb.org',\n  nativeCurrency: {\n    name: 'Volta',\n    symbol: 'VT',\n    decimals: 18\n  },\n  blockExplorerUrls: ['http://volta-aexplorer.energyweb.org']\n}\n\nexport const IOTEX_MAINNET: Chain = {\n  id: 'iotex_mainnet',\n  chain_id: 4689,\n  name: 'IoTex Mainnet',\n  symbol: 'IOTX',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/iotx.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://babel-api.mainnet.iotex.io',\n  coingecko_id: 'iotex',\n  nativeCurrency: {\n    name: 'IoTex',\n    symbol: 'IOTX',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://iotexscan.io']\n}\n\nexport const IOTEX_TESTNET: Chain = {\n  id: 'iotex_testnet',\n  chain_id: 4690,\n  name: 'IoTex Testnet',\n  symbol: 'IOTX',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/iotx.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://babel-api.testnet.iotex.io',\n  nativeCurrency: {\n    name: 'IoTex',\n    symbol: 'IOTX',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.iotexscan.io']\n}\n\nexport const ASTAR_MAINNET: Chain = {\n  id: 'astar_mainnet',\n  chain_id: 592,\n  name: 'Astar Network',\n  symbol: 'ASTR',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://astar.api.onfinality.io/public',\n  nativeCurrency: {\n    name: 'Astar',\n    symbol: 'ASTL',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://blockscout.com/astar']\n}\n\nexport const SHIDEN_MAINNET: Chain = {\n  id: 'astar_shiden_testnet',\n  chain_id: 336,\n  name: 'Shiden Network',\n  symbol: 'SDN',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://shiden.api.onfinality.io/public',\n  nativeCurrency: {\n    name: 'Shiden',\n    symbol: 'SDN',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://blockscout.com/shiden']\n}\n\nexport const SHIBUYA_TESTNET: Chain = {\n  id: 'astar_shibuya_testnet',\n  chain_id: 81,\n  name: 'Shibuya Network',\n  symbol: 'SBY',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.shibuya.astar.network:8545',\n  nativeCurrency: {\n    name: 'Shibuya',\n    symbol: 'SBY',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://blockscout.com/shibuya']\n}\n\nexport const TELOS_MAINNET: Chain = {\n  id: 'telos_mainnet',\n  chain_id: 40,\n  name: 'Telos',\n  symbol: 'TLOS',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/telos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.telos.net/evm',\n  coingecko_id: 'telos',\n  nativeCurrency: {\n    name: 'TELOS',\n    symbol: 'TLOS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://www.teloscan.io']\n}\n\nexport const TELOS_TESTNET: Chain = {\n  id: 'telos_testnet',\n  chain_id: 41,\n  name: 'Telos Testnet',\n  symbol: 'TLOS',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/telos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.telos.net/evm',\n  nativeCurrency: {\n    name: 'TELOS',\n    symbol: 'TLOS',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.telos.net/v2/explore']\n}\n\nexport const OASIS_MAINNET: Chain = {\n  id: 'oasis_mainnet',\n  chain_id: 42262,\n  name: 'Oasis Emerald',\n  symbol: 'ROSE',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/oasis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://emerald.oasis.dev',\n  coingecko_id: 'oasis',\n  nativeCurrency: {\n    name: 'Oasis Network',\n    symbol: 'ROSE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://explorer.emerald.oasis.dev']\n}\n\nexport const OASIS_TESTNET: Chain = {\n  id: 'oasis_testnet',\n  chain_id: 42261,\n  name: 'Oasis Emerald Testnet',\n  symbol: 'ROSE',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/oasis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.emerald.oasis.dev',\n  nativeCurrency: {\n    name: 'Oasis Network',\n    symbol: 'ROSE',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://testnet.explorer.emerald.oasis.dev']\n}\n\nexport const GODWOKEN_MAINNET: Chain = {\n  id: 'godwoken_mainnet',\n  chain_id: 71394,\n  name: 'Godwoken Testnet',\n  symbol: 'CKB',\n  mainnet: true,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/godwoken.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.godwoken.io/rpc/eth-wallet',\n  nativeCurrency: {\n    name: 'Nervos Network',\n    symbol: 'CKB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://gwscan.com']\n}\n\nexport const GODWOKEN_TESTNET: Chain = {\n  id: 'godwoken_mainnet',\n  chain_id: 71393,\n  name: 'Godwoken Testnet',\n  symbol: 'CKB',\n  mainnet: false,\n  evm: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/godwoken.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://godwoken-testnet-web3-v1-rpc.ckbapp.dev/',\n  nativeCurrency: {\n    name: 'Nervos Network',\n    symbol: 'CKB',\n    decimals: 18\n  },\n  blockExplorerUrls: ['https://aggron.gwscan.com/en-US']\n}\n\nexport const CHAINS: { [chainId in ChainId]: Chain } = {\n  [ChainId.FUJI]: AVALANCHE_FUJI,\n  [ChainId.AVALANCHE]: AVALANCHE_MAINNET,\n  [ChainId.WAGMI]: WAGMI_FUJI_SUBNET,\n  [ChainId.COSTON]: COSTON_TESTNET,\n  [ChainId.SONGBIRD]: SONGBIRD_CANARY,\n  [ChainId.NEAR_MAINNET]: NEAR_MAINNET,\n  [ChainId.NEAR_TESTNET]: NEAR_TESTNET\n}\n\nexport const ALL_CHAINS: Chain[] = [\n  ETHEREUM_MAINNET,\n  ARBITRUM_MAINNET,\n  ARBITRUM_RINKEBY,\n  AURORA_MAINNET,\n  AURORA_TESTNET,\n  AVALANCHE_MAINNET,\n  AVALANCHE_FUJI,\n  BOBA_MAINNET,\n  BITTORRENT_MAINNET,\n  BSC_MAINNET,\n  BSC_TESTNET,\n  CELO_MAINNET,\n  CELO_ALFAJORES_TESTNET,\n  CELO_BAKLAVA_TESTNET,\n  COSTON_TESTNET,\n  CRONOS_MAINNET,\n  CRONOS_TESTNET,\n  EVMOS_MAINNET,\n  EVMOS_TESTNET,\n  FANTOM_MAINNET,\n  FANTOM_TESTNET,\n  FUSE_MAINNET,\n  FUSE_TESTNET,\n  HARMONY_MAINNET,\n  HARMONY_TESTNET,\n  HECO_MAINNET,\n  HECO_TESTNET,\n  KLAYTN_MAINNET,\n  KLAYTN_BAOBAB,\n  METIS_MAINNET,\n  METIS_RINKEBY,\n  MOONRIVER_MAINNET,\n  MOONBEAM_MAINNET,\n  MOONBEAM_MOONBASE,\n  OEC_MAINNET,\n  OEC_TESTNET,\n  OP_MAINNET,\n  OP_KOVAN,\n  POLYGON_MAINNET,\n  POLYGON_MUMBAI,\n  SONGBIRD_CANARY,\n  WAGMI_FUJI_SUBNET,\n  XDAI_MAINNET,\n  EWC_MAINNET,\n  EWC_TESTNET,\n  IOTEX_MAINNET,\n  IOTEX_TESTNET,\n  ASTAR_MAINNET,\n  SHIDEN_MAINNET,\n  SHIBUYA_TESTNET,\n  TELOS_MAINNET,\n  TELOS_TESTNET,\n  OASIS_MAINNET,\n  OASIS_TESTNET,\n  GODWOKEN_MAINNET,\n  GODWOKEN_TESTNET\n]\n","import JSBI from 'jsbi'\nimport { ChainId, CHAINS } from './chains'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.FUJI]: CHAINS[ChainId.FUJI].contracts!.factory,\n  [ChainId.AVALANCHE]: CHAINS[ChainId.AVALANCHE].contracts!.factory,\n  [ChainId.WAGMI]: CHAINS[ChainId.WAGMI].contracts!.factory,\n  [ChainId.COSTON]: CHAINS[ChainId.COSTON].contracts!.factory,\n  [ChainId.SONGBIRD]: CHAINS[ChainId.SONGBIRD].contracts!.factory,\n  [ChainId.NEAR_MAINNET]: CHAINS[ChainId.NEAR_MAINNET].contracts!.factory,\n  [ChainId.NEAR_TESTNET]: CHAINS[ChainId.NEAR_TESTNET].contracts!.factory\n}\n\nexport const INIT_CODE_HASH = '0x40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the pool method is not supported for the particular implementation\n */\nexport class MethodNotSupported extends Error {\n  public readonly isMethodNotSupportedError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\nexport function abs(x: JSBI): JSBI {\n  if (JSBI.lessThan(x, ZERO)) return JSBI.multiply(x, JSBI.BigInt(-1))\n  else return x\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\nimport { CHAINS } from '../chains'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n\n  //$ public static readonly CAVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\n\n  public static readonly CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.FUJI]: new Currency(18, CHAINS[ChainId.FUJI].symbol, CHAINS[ChainId.FUJI].name),\n    [ChainId.AVALANCHE]: new Currency(18, CHAINS[ChainId.AVALANCHE].symbol, CHAINS[ChainId.AVALANCHE].name),\n    [ChainId.WAGMI]: new Currency(18, CHAINS[ChainId.WAGMI].symbol, CHAINS[ChainId.WAGMI].name),\n    [ChainId.COSTON]: new Currency(18, CHAINS[ChainId.COSTON].symbol, CHAINS[ChainId.COSTON].name),\n    [ChainId.SONGBIRD]: new Currency(18, CHAINS[ChainId.SONGBIRD].symbol, CHAINS[ChainId.SONGBIRD].name),\n    [ChainId.NEAR_MAINNET]: new Currency(24, CHAINS[ChainId.NEAR_MAINNET].symbol, CHAINS[ChainId.NEAR_MAINNET].name),\n    [ChainId.NEAR_TESTNET]: new Currency(24, CHAINS[ChainId.NEAR_TESTNET].symbol, CHAINS[ChainId.NEAR_TESTNET].name)\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\n//$ const CAVAX = Currency.CAVAX\nconst CAVAX = Currency.CURRENCY\nexport { CAVAX }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../chains'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\nimport { CHAINS } from '../chains'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId = ChainId.AVALANCHE\n  public readonly address: string\n\n  public constructor(\n    chainId: ChainId = ChainId.AVALANCHE,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n\n    // only validate address for evm chains\n    const shouldValidateAddress = !!CHAINS[chainId]?.evm\n    this.address = shouldValidateAddress ? validateAndParseAddress(address) : address\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WAVAX: { [chainId in ChainId]: Token } = {\n  [ChainId.FUJI]: new Token(\n    ChainId.FUJI,\n    CHAINS[ChainId.FUJI].contracts!.wrapped_native_token,\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    CHAINS[ChainId.AVALANCHE].contracts!.wrapped_native_token,\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.WAGMI]: new Token(\n    ChainId.WAGMI,\n    CHAINS[ChainId.WAGMI].contracts!.wrapped_native_token,\n    18,\n    'wWAGMI',\n    'Wrapped WAGMI'\n  ),\n  [ChainId.COSTON]: new Token(\n    ChainId.COSTON,\n    CHAINS[ChainId.COSTON].contracts!.wrapped_native_token,\n    18,\n    'WCFLR',\n    'Wrapped CostonFlare'\n  ),\n  [ChainId.SONGBIRD]: new Token(\n    ChainId.SONGBIRD,\n    CHAINS[ChainId.SONGBIRD].contracts!.wrapped_native_token,\n    18,\n    'wWSGB',\n    'Wrapped Songbird'\n  ),\n  [ChainId.NEAR_MAINNET]: new Token(\n    ChainId.NEAR_MAINNET,\n    CHAINS[ChainId.NEAR_MAINNET].contracts!.wrapped_native_token,\n    24,\n    'wNEAR',\n    'Wrapped NEAR'\n  ),\n  [ChainId.NEAR_TESTNET]: new Token(\n    ChainId.NEAR_TESTNET,\n    CHAINS[ChainId.NEAR_TESTNET].contracts!.wrapped_native_token,\n    24,\n    'wNEAR',\n    'Wrapped NEAR'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, CAVAX } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\nimport { ChainId } from '../../chains'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   * @param chainId\n   */\n  public static ether(amount: BigintIsh, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    return new CurrencyAmount(CAVAX[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\nimport { ChainId } from '../../chains'\n\nexport class Price extends Fraction {\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param chainId\n   */\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pool] of route.pools.entries()) {\n      prices.push(pool.priceOf(route.path[i], route.path[i + 1]))\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient, chainId)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { ChainId } from '../chains'\nimport invariant from 'tiny-invariant'\nimport { Currency, CAVAX } from './currency'\nimport { Token, WAVAX } from './token'\nimport { Pool } from './pools/pool'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pools: Pool[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pools: Pool[], input: Currency, output: Currency, hops: Token[] = []) {\n    invariant(pools.length > 0, 'PAIRS')\n    invariant(pools.every(pool => pool.tokenCount === 2) || hops.length === pools.length - 1, 'HOPS')\n    const chainId = pools[0].chainId\n    invariant(\n      pools.every(pool => pool.chainId === chainId),\n      'CHAIN_IDS'\n    )\n    if (input === CAVAX[chainId]) {\n      invariant(pools[0].involvesToken(WAVAX[chainId]), 'INPUT')\n    }\n    if (output === CAVAX[chainId]) {\n      invariant(pools[pools.length - 1].involvesToken(WAVAX[chainId]), 'OUTPUT')\n    }\n\n    const wrappedInput: Token = input instanceof Token ? input : WAVAX[chainId]\n    const wrappedOutput: Token = output instanceof Token ? output : WAVAX[chainId]\n\n    const path: Token[] = [wrappedInput]\n\n    for (const [i, pool] of pools.entries()) {\n      const inputToken = path[i]\n      invariant(pool.involvesToken(inputToken), 'PATH')\n      let outputToken: Token\n      if (pool.tokenCount === 2) {\n        outputToken = inputToken.equals(pool.token(0)) ? pool.token(1) : pool.token(0)\n      } else {\n        // When a pool has 3+ tokens we need `hops` to guarantee a deterministic path\n        outputToken = i === pools.length ? wrappedOutput : hops[i]\n        invariant(!inputToken.equals(outputToken), 'DUPLICATE')\n        invariant(pool.involvesToken(outputToken), 'PATH')\n      }\n      path.push(outputToken)\n    }\n\n    this.pools = pools\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output\n  }\n\n  public get chainId(): ChainId {\n    return this.pools[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId, InsufficientInputAmountError, InsufficientReservesError } from '..'\n\nimport { ONE, TradeType, ZERO, ZERO_ADDRESS } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, CAVAX } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pool } from './pools'\nimport { Route } from './route'\nimport { currencyEquals, Token, WAVAX } from './token'\n\nconst ZERO_PERCENT = new Percent(ZERO)\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\nexport interface DaasOptions {\n  fee: Percent\n  feeTo: string\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === CAVAX[chainId]) return new TokenAmount(WAVAX[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId = ChainId.AVALANCHE): Token {\n  if (currency instanceof Token) return currency\n  if (currency === CAVAX[chainId]) return WAVAX[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pools.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pools the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  public readonly chainId: ChainId = ChainId.AVALANCHE\n\n  public readonly fee: Percent = new Percent(ZERO)\n\n  public readonly feeTo: string = ZERO_ADDRESS\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   * @param chainId chain id\n   * @param daasOptions fee information possibly imposed via DEX as a service\n   */\n  public static exactIn(\n    route: Route,\n    amountIn: CurrencyAmount,\n    chainId: ChainId = ChainId.AVALANCHE,\n    daasOptions?: DaasOptions\n  ): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, chainId, daasOptions)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   * @param chainId chain id\n   * @param daasOptions fee information possibly imposed via DEX as a service\n   */\n  public static exactOut(\n    route: Route,\n    amountOut: CurrencyAmount,\n    chainId: ChainId = ChainId.AVALANCHE,\n    daasOptions?: DaasOptions\n  ): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, chainId, daasOptions)\n  }\n\n  public constructor(\n    route: Route,\n    amount: CurrencyAmount,\n    tradeType: TradeType,\n    chainId: ChainId = ChainId.AVALANCHE,\n    { fee, feeTo }: DaasOptions = { fee: ZERO_PERCENT, feeTo: ZERO_ADDRESS }\n  ) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPools: Pool[] = new Array(route.pools.length)\n    let fullOutputAmount: TokenAmount\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount, nextPool] = pool.getOutputAmount(amounts[i], route.path[i + 1])\n        amounts[i + 1] = outputAmount\n        nextPools[i] = nextPool\n      }\n      fullOutputAmount = amounts[amounts.length - 1]\n      const userReceivedAmountOut = new Fraction(ONE).subtract(fee).multiply(fullOutputAmount.raw).quotient\n      amounts[amounts.length - 1] = new TokenAmount(fullOutputAmount.token, userReceivedAmountOut)\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      const userReceivedAmountOut = wrappedAmount(amount, route.chainId)\n      const fullOutputQuantity = new Fraction(ONE).add(fee).multiply(userReceivedAmountOut.raw).quotient\n      fullOutputAmount = new TokenAmount(userReceivedAmountOut.token, fullOutputQuantity)\n      amounts[amounts.length - 1] = fullOutputAmount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        const [inputAmount, nextPool] = pool.getInputAmount(amounts[i], route.path[i - 1])\n        amounts[i - 1] = inputAmount\n        nextPools[i - 1] = nextPool\n      }\n      amounts[amounts.length - 1] = userReceivedAmountOut\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === CAVAX[chainId]\n        ? CurrencyAmount.ether(amounts[0].raw, chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === CAVAX[chainId]\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw, chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPools, route.input, route.output))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, fullOutputAmount)\n    this.chainId = chainId\n    this.fee = fee\n    this.feeTo = feeTo\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param fee total fee possibly imposed via DEX as a service\n   * @param feeTo possible DEX as a service partner\n   * @param currentPools used in recursion; the current list of pools\n   * @param currentHops used in recursion; the current list of intermediate hops for pools with 3+ assets\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    { fee, feeTo }: DaasOptions = { fee: ZERO_PERCENT, feeTo: ZERO_ADDRESS },\n    // used in recursion.\n    currentPools: Pool[] = [],\n    currentHops: Token[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenIn = amountIn.token\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n\n      if (pool.reserves.some((reserve: TokenAmount) => reserve.equalTo(ZERO))) {\n        // Remove this pool from future routing consideration\n        pools = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n        i--\n        continue\n      }\n      if (!pool.involvesToken(tokenIn)) continue\n\n      // Avoid repeatedly calling tokenAmounts.map (nested in pool.tokens) during the subsequent for loop\n      const poolTokens: Token[] = pool.tokens\n\n      for (const tokenHop of poolTokens) {\n        if (tokenHop.equals(tokenIn)) continue\n\n        let amountOut: TokenAmount\n        try {\n          ;[amountOut] = pool.getOutputAmount(amountIn, tokenHop)\n        } catch (error) {\n          if (error instanceof InsufficientInputAmountError || error instanceof InsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        // we have arrived at the output token, so this is the final trade of one of the paths\n        if (amountOut.token.equals(tokenOut)) {\n          sortedInsert(\n            bestTrades,\n            new Trade(\n              new Route([...currentPools, pool], originalAmountIn.currency, currencyOut, currentHops),\n              originalAmountIn,\n              TradeType.EXACT_INPUT,\n              chainId,\n              { fee, feeTo }\n            ),\n            maxNumResults,\n            tradeComparator\n          )\n        } else if (maxHops > 1 && pools.length > 1) {\n          const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n          // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n          Trade.bestTradeExactIn(\n            poolsExcludingThisPool,\n            amountOut,\n            currencyOut,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            { fee, feeTo },\n            [...currentPools, pool],\n            [...currentHops, tokenHop],\n            originalAmountIn,\n            bestTrades\n          )\n        }\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param fee total fee possibly imposed via DEX as a service\n   * @param feeTo possible DEX as a service partner\n   * @param currentPools used in recursion; the current list of pools\n   * @param currentHops used in recursion; the current list of intermediate hops for pools with 3+ assets\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pools: Pool[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    { fee, feeTo }: DaasOptions = { fee: ZERO_PERCENT, feeTo: ZERO_ADDRESS },\n    // used in recursion.\n    currentPools: Pool[] = [],\n    currentHops: Token[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    const tokenOut = amountOut.token\n\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n\n      if (pool.reserves.some((reserve: TokenAmount) => reserve.equalTo(ZERO))) {\n        // Remove this pool from future routing consideration\n        pools = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n        i--\n        continue\n      }\n      if (!pool.involvesToken(tokenOut)) continue\n\n      // Avoid repeatedly calling tokenAmounts.map (nested in pool.tokens) during the subsequent for loop\n      const poolTokens: Token[] = pool.tokens\n\n      for (const tokenHop of poolTokens) {\n        if (tokenHop.equals(tokenOut)) continue\n\n        let amountIn: TokenAmount\n        try {\n          ;[amountIn] = pool.getInputAmount(amountOut, tokenHop)\n        } catch (error) {\n          if (error instanceof InsufficientInputAmountError || error instanceof InsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        // we have arrived at the input token, so this is the first trade of one of the paths\n        if (amountIn.token.equals(tokenIn)) {\n          sortedInsert(\n            bestTrades,\n            new Trade(\n              new Route([pool, ...currentPools], currencyIn, originalAmountOut.currency, currentHops),\n              originalAmountOut,\n              TradeType.EXACT_OUTPUT,\n              chainId,\n              { fee, feeTo }\n            ),\n            maxNumResults,\n            tradeComparator\n          )\n        } else if (maxHops > 1 && pools.length > 1) {\n          const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n          // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n          Trade.bestTradeExactOut(\n            poolsExcludingThisPool,\n            currencyIn,\n            amountIn,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            { fee, feeTo },\n            [pool, ...currentPools],\n            [tokenHop, ...currentHops],\n            originalAmountOut,\n            bestTrades\n          )\n        }\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Token } from '../token'\nimport { ChainId } from '../../chains'\nimport { Price, TokenAmount } from '../fractions'\n\nexport abstract class Pool {\n  public readonly chainId: ChainId\n  public readonly liquidityToken: Token\n\n  protected readonly tokenAmounts: TokenAmount[]\n\n  protected constructor(chainId: ChainId, liquidityToken: Token, tokenAmounts: TokenAmount[]) {\n    const addresses = tokenAmounts.map(tokenAmount => tokenAmount.token.address.toLowerCase())\n    invariant(\n      addresses.every((address, i) => addresses.indexOf(address) === i),\n      'DUPLICATE_TOKEN'\n    )\n    invariant(tokenAmounts.length > 0, 'INSUFFICIENT_TOKENS')\n    invariant(\n      tokenAmounts.every(({ token }) => token.chainId === chainId),\n      'CHAIN_MISMATCH'\n    )\n\n    this.chainId = chainId\n    this.liquidityToken = liquidityToken\n    this.tokenAmounts = tokenAmounts\n  }\n\n  // Tokens\n\n  get tokenCount(): number {\n    return this.tokenAmounts.length\n  }\n\n  get tokens(): Token[] {\n    return this.tokenAmounts.map(tokenAmount => tokenAmount.token)\n  }\n\n  involvesToken(token: Token): boolean {\n    return this.tokenAmounts.some(tokenAmount => tokenAmount.token.equals(token))\n  }\n\n  token(index: number): Token {\n    return this.tokenAmounts[index].token\n  }\n\n  tokenIndex(token: Token): number {\n    return this.tokenAmounts.findIndex(tokenAmount => tokenAmount.token.equals(token))\n  }\n\n  // Reserves\n\n  get reserves(): TokenAmount[] {\n    return this.tokenAmounts\n  }\n\n  reserveOfIndex(index: number): TokenAmount {\n    return this.tokenAmounts[index]\n  }\n\n  reserveOfToken(token: Token): TokenAmount {\n    const index = this.tokenIndex(token)\n    invariant(index >= 0, 'TOKEN_MISSING')\n    return this.tokenAmounts[index]\n  }\n\n  // Prices\n\n  priceOf(baseToken: Token, quoteToken: Token): Price {\n    return new Price(baseToken, quoteToken, this.reserveOfToken(baseToken).raw, this.reserveOfToken(quoteToken).raw)\n  }\n\n  // Swap\n\n  abstract getOutputAmount(inputAmount: TokenAmount, outputToken: Token): [TokenAmount, Pool]\n\n  abstract getInputAmount(outputAmount: TokenAmount, inputToken: Token): [TokenAmount, Pool]\n\n  // Swap Fees\n\n  abstract get swapFeeCoefficient(): JSBI\n\n  abstract get swapFeeDivisor(): JSBI\n\n  // Mint\n\n  abstract getLiquidityMinted(totalSupply: TokenAmount, depositTokenAmounts: TokenAmount[]): TokenAmount\n\n  // Burn\n\n  abstract getLiquidityValues(totalSupply: TokenAmount, shares: TokenAmount, options?: object): TokenAmount[]\n}\n","import { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Pool } from './pool'\nimport { Token } from '../token'\nimport { Price, TokenAmount } from '../fractions'\nimport { ChainId, CHAINS } from '../../chains'\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _998,\n  _1000\n} from '../../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../../errors'\nimport { sqrt, parseBigintIsh } from '../../utils'\n\nexport class Pair extends Pool {\n  public static getAddress(tokenA: Token, tokenB: Token, chainId: ChainId = ChainId.AVALANCHE): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    // we create custom lp address here\n    // for evm we have method to create lp address\n    // but for non-evm we don't have that method, so for now we are going to concatenate both token addresses\n    return !!CHAINS[chainId]?.evm\n      ? getCreate2Address(\n          FACTORY_ADDRESS[chainId],\n          keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n          INIT_CODE_HASH\n        )\n      : `${tokens[0].address}-${tokens[1].address}`\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, chainId: ChainId = ChainId.AVALANCHE) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    let decimals: number\n    if ([ChainId.NEAR_TESTNET, ChainId.NEAR_MAINNET].includes(chainId)) {\n      decimals = 24\n    } else {\n      decimals = 18\n    }\n\n    const liquidityToken = new Token(\n      chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, chainId),\n      decimals,\n      'PGL',\n      'Pangolin Liquidity'\n    )\n\n    super(chainId, liquidityToken, tokenAmounts)\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get token0Price(): Price {\n    return this.priceOf(this.token0, this.token1)\n  }\n\n  public get token1Price(): Price {\n    return this.priceOf(this.token1, this.token0)\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public get swapFeeCoefficient(): JSBI {\n    switch (this.chainId) {\n      case ChainId.NEAR_MAINNET:\n      case ChainId.NEAR_TESTNET:\n        return _998 // 0.2%\n      default:\n        return _997 // 0.3%\n    }\n  }\n\n  public get swapFeeDivisor(): JSBI {\n    switch (this.chainId) {\n      default:\n        return _1000\n    }\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, outputToken: Token): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token) && this.involvesToken(outputToken), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOfToken(inputAmount.token)\n    const outputReserve = this.reserveOfToken(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, this.swapFeeCoefficient)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, this.swapFeeDivisor), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.chainId)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, inputToken: Token): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token) && this.involvesToken(inputToken), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOfToken(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOfToken(outputAmount.token)\n    const inputReserve = this.reserveOfToken(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), this.swapFeeDivisor)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), this.swapFeeCoefficient)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.chainId)]\n  }\n\n  public getLiquidityMinted(totalSupply: TokenAmount, depositTokenAmounts: TokenAmount[]): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(depositTokenAmounts.length === 2, 'LIQUIDITY_TOKENS')\n    const tokenAmounts = depositTokenAmounts[0].token.sortsBefore(depositTokenAmounts[1].token) // does safety checks\n      ? [depositTokenAmounts[0], depositTokenAmounts[1]]\n      : [depositTokenAmounts[1], depositTokenAmounts[0]]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValues(\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    options?: {\n      feeOn?: boolean\n      kLast?: BigintIsh\n    }\n  ): TokenAmount[] {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!options?.feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!options?.kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(options.kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return this.reserves.map(\n      (reserve: TokenAmount) =>\n        new TokenAmount(reserve.token, JSBI.divide(JSBI.multiply(liquidity.raw, reserve.raw), totalSupplyAdjusted.raw))\n    )\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Pool } from './pool'\nimport { Token } from '../token'\nimport { ChainId } from '../../chains'\nimport { ZERO, TWO, TEN, ONE } from '../../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError, MethodNotSupported } from '../../errors'\nimport { TokenAmount } from '../fractions'\nimport { abs } from '../../utils'\n\nexport const TARGET_DECIMAL = JSBI.BigInt(18)\nexport const MIN_RESERVE = JSBI.exponentiate(TEN, TARGET_DECIMAL)\n\nexport class Vault extends Pool {\n  public readonly amp: JSBI\n\n  static getAddress(tokens: Token[]): string {\n    return tokens.map((token: Token) => token.address).join('-')\n  }\n\n  public constructor(tokenAmounts: TokenAmount[], amp: JSBI, chainId: ChainId = ChainId.NEAR_TESTNET) {\n    invariant(JSBI.greaterThanOrEqual(amp, ONE) && JSBI.lessThanOrEqual(amp, JSBI.BigInt(1_000_000)), 'AMP_ILLEGAL')\n    invariant(\n      tokenAmounts.every(({ token }) => token.decimals >= 1 && token.decimals <= 24),\n      'DECIMAL_ILLEGAL'\n    )\n\n    const liquidityToken = new Token(\n      chainId,\n      Vault.getAddress(tokenAmounts.map(tokenAmount => tokenAmount.token)),\n      18,\n      'PGL',\n      'Pangolin Liquidity'\n    )\n\n    super(chainId, liquidityToken, tokenAmounts)\n\n    this.amp = amp\n  }\n\n  public get reserves_c(): JSBI[] {\n    return this.tokenAmounts.map((tokenAmount: TokenAmount) =>\n      Vault.amount_to_c_amount(tokenAmount.raw, tokenAmount.token.decimals)\n    )\n  }\n\n  public static amount_to_c_amount(amount: JSBI, decimals: number): JSBI {\n    const decimalsBI = JSBI.BigInt(decimals)\n    if (JSBI.lessThanOrEqual(decimalsBI, TARGET_DECIMAL)) {\n      const factor = JSBI.exponentiate(TEN, JSBI.subtract(TARGET_DECIMAL, decimalsBI))\n      return JSBI.multiply(amount, factor)\n    } else {\n      const factor = JSBI.exponentiate(TEN, JSBI.subtract(decimalsBI, TARGET_DECIMAL))\n      return JSBI.divide(amount, factor)\n    }\n  }\n\n  public static c_amount_to_amount(c_amount: JSBI, decimals: number): JSBI {\n    const decimalsBI = JSBI.BigInt(decimals)\n    if (JSBI.lessThanOrEqual(decimalsBI, TARGET_DECIMAL)) {\n      const factor = JSBI.exponentiate(TEN, JSBI.subtract(TARGET_DECIMAL, decimalsBI))\n      return JSBI.divide(c_amount, factor)\n    } else {\n      const factor = JSBI.exponentiate(TEN, JSBI.subtract(decimalsBI, TARGET_DECIMAL))\n      return JSBI.multiply(c_amount, factor)\n    }\n  }\n\n  /**\n   * Returns the swap fee coefficient (x / DIVISOR) for swaps utilizing the vault.\n   * Where (1 - (x/DIVISOR)) of each swap belongs to the LPs\n   */\n  public get swapFeeCoefficient(): JSBI {\n    switch (this.chainId) {\n      default:\n        return JSBI.BigInt(9995) // 0.05%\n    }\n  }\n\n  public get swapFeeDivisor(): JSBI {\n    switch (this.chainId) {\n      default:\n        return JSBI.BigInt(10000)\n    }\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, outputToken: Token): [TokenAmount, Vault] {\n    const in_token_i = this.tokens.indexOf(inputAmount.token)\n    const out_token_i = this.tokens.indexOf(outputToken)\n\n    invariant(in_token_i >= 0 && in_token_i < this.tokenCount, 'TOKEN_IN_I')\n    invariant(out_token_i >= 0 && out_token_i < this.tokenCount, 'TOKEN_OUT_I')\n\n    if (this.reserveOfToken(outputToken).equalTo(ZERO)) {\n      throw new InsufficientReservesError()\n    }\n\n    const c_amounts = this.reserves_c\n\n    const y = this.calc_y(\n      JSBI.BigInt(this.amp),\n      JSBI.add(c_amounts[in_token_i], inputAmount.raw),\n      c_amounts,\n      in_token_i,\n      out_token_i\n    )\n    const dy = JSBI.subtract(c_amounts[out_token_i], y)\n    const outputAmountWithFee = Vault.c_amount_to_amount(\n      JSBI.divide(JSBI.multiply(dy, this.swapFeeCoefficient), this.swapFeeDivisor),\n      outputToken.decimals\n    )\n\n    if (JSBI.equal(outputAmountWithFee, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const newTokenAmounts = this.tokenAmounts\n    newTokenAmounts[in_token_i] = newTokenAmounts[in_token_i].add(inputAmount)\n    newTokenAmounts[out_token_i] = newTokenAmounts[out_token_i].subtract(\n      new TokenAmount(outputToken, outputAmountWithFee)\n    )\n\n    const newOutputTokenReserve_c = Vault.amount_to_c_amount(newTokenAmounts[out_token_i].raw, outputToken.decimals)\n    invariant(JSBI.greaterThanOrEqual(newOutputTokenReserve_c, MIN_RESERVE), 'MIN_RESERVE')\n\n    return [new TokenAmount(outputToken, outputAmountWithFee), new Vault(newTokenAmounts, this.amp, this.chainId)]\n  }\n\n  public getInputAmount(_outputToken: TokenAmount, _inputToken: Token): [TokenAmount, Vault] {\n    throw new MethodNotSupported()\n  }\n\n  // Depositing X tokens for ? liquidity shares\n  public getLiquidityMinted(totalSupply: TokenAmount, depositTokenAmounts: TokenAmount[]): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(depositTokenAmounts.length <= this.tokenCount, 'LIQUIDITY_TOKENS')\n\n    const deposit_c_amounts: JSBI[] = []\n    for (let i = 0; i < this.tokenCount; i++) {\n      const deposit = depositTokenAmounts[i]\n      if (deposit) {\n        invariant(this.involvesToken(deposit.token), 'LIQUIDITY_TOKENS')\n        deposit_c_amounts[i] = Vault.amount_to_c_amount(deposit.raw, deposit.token.decimals)\n      } else {\n        deposit_c_amounts[i] = ZERO\n      }\n    }\n\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      const d_0 = this.calc_d(this.amp, deposit_c_amounts)\n      return new TokenAmount(this.liquidityToken, d_0)\n    }\n\n    const n = this.tokenCount\n    const old_c_amounts = this.reserves_c\n    const d_0 = this.calc_d(this.amp, old_c_amounts)\n    let new_c_amounts = []\n    for (let i = 0; i < n; i++) {\n      new_c_amounts[i] = JSBI.add(old_c_amounts[i], deposit_c_amounts[i])\n    }\n    const d_1 = this.calc_d(this.amp, new_c_amounts)\n\n    if (JSBI.lessThanOrEqual(d_1, d_0)) throw new Error(`D1 need less then or equal to D0.`)\n\n    for (let i = 0; i < n; i++) {\n      const ideal_balance = JSBI.divide(JSBI.multiply(old_c_amounts[i], d_1), d_0)\n      const difference = abs(JSBI.subtract(ideal_balance, new_c_amounts[i]))\n      const fee = this.normalized_trade_fee(n, difference)\n      new_c_amounts[i] = JSBI.subtract(new_c_amounts[i], fee)\n    }\n    const d_2 = this.calc_d(this.amp, new_c_amounts)\n\n    if (JSBI.lessThan(d_1, d_2)) throw new Error(`D2 need less then D1.`)\n    if (JSBI.lessThanOrEqual(d_2, d_0)) throw new Error(`D1 need less then or equal to D0.`)\n\n    const mint_shares = JSBI.divide(JSBI.multiply(totalSupply.raw, JSBI.subtract(d_2, d_0)), d_0)\n\n    return new TokenAmount(this.liquidityToken, mint_shares)\n  }\n\n  // Redeeming X liquidity shares for ? (all) tokens\n  public getLiquidityValues(totalSupply: TokenAmount, shares: TokenAmount): TokenAmount[] {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(shares.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(shares.raw, totalSupply.raw), 'LIQUIDITY')\n\n    const liquidityTokenValues = []\n    const c_amounts = this.reserves_c\n\n    for (let i = 0; i < this.tokenCount; i++) {\n      const amount = JSBI.equal(totalSupply.raw, ZERO)\n        ? ZERO\n        : JSBI.divide(JSBI.multiply(this.tokenAmounts[i].raw, shares.raw), totalSupply.raw)\n      const amount_c = Vault.amount_to_c_amount(amount, this.tokenAmounts[i].token.decimals)\n      const remaining_amount_c = JSBI.subtract(c_amounts[i], amount_c)\n      invariant(JSBI.greaterThanOrEqual(remaining_amount_c, MIN_RESERVE), 'MIN_RESERVE')\n      liquidityTokenValues[i] = new TokenAmount(this.tokenAmounts[i].token, amount)\n    }\n\n    return liquidityTokenValues\n  }\n\n  // Withdrawing X tokens in exchange for ? liquidity shares\n  public getLiquidityValuesByTokens(totalSupply: TokenAmount, withdrawTokenAmounts: TokenAmount[]): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(withdrawTokenAmounts.length <= this.tokenCount, 'LIQUIDITY_TOKENS')\n\n    const removed_c_amounts: JSBI[] = []\n    for (let i = 0; i < this.tokenCount; i++) {\n      const withdrawal = withdrawTokenAmounts[i]\n      if (withdrawal) {\n        invariant(this.involvesToken(withdrawal.token), 'LIQUIDITY_TOKENS')\n        removed_c_amounts[i] = Vault.amount_to_c_amount(withdrawal.raw, withdrawal.token.decimals)\n      } else {\n        removed_c_amounts[i] = ZERO\n      }\n    }\n\n    const old_c_amounts = this.reserves_c\n    const pool_token_supply = totalSupply\n\n    const token_num = old_c_amounts.length\n    const d_0 = this.calc_d(this.amp, old_c_amounts)\n    let c_amounts = []\n    for (let i = 0; i < old_c_amounts.length; i++) {\n      c_amounts[i] = JSBI.subtract(old_c_amounts[i], removed_c_amounts[i])\n      invariant(JSBI.greaterThanOrEqual(c_amounts[i], MIN_RESERVE), 'MIN_RESERVE')\n    }\n    const d_1 = this.calc_d(this.amp, c_amounts)\n    if (d_1 >= d_0) throw new Error(`D1 need less then or equal to D0.`)\n    for (let i = 0; i < token_num; i++) {\n      const ideal_balance = JSBI.divide(JSBI.multiply(old_c_amounts[i], d_1), d_0)\n      const difference = abs(JSBI.subtract(ideal_balance, c_amounts[i]))\n      const fee = this.normalized_trade_fee(token_num, difference)\n      c_amounts[i] = JSBI.subtract(c_amounts[i], fee)\n    }\n    const d_2 = this.calc_d(this.amp, c_amounts)\n    if (d_2 > d_1) throw new Error(`D2 need less then D1.`)\n    if (d_1 >= d_0) throw new Error(`D1 need less then or equal to D0.`)\n    const burn_shares = JSBI.divide(JSBI.multiply(pool_token_supply.raw, JSBI.subtract(d_0, d_2)), d_0)\n\n    return new TokenAmount(this.liquidityToken, burn_shares)\n  }\n\n  private calc_y(amp: JSBI, x_c_amount: JSBI, c_amounts: JSBI[], in_token_i: number, out_token_i: number): JSBI {\n    const n = c_amounts.length\n    const n_jsbi = JSBI.BigInt(n)\n    const nn = JSBI.exponentiate(n_jsbi, n_jsbi)\n    const ann = JSBI.multiply(amp, nn)\n    const d = this.calc_d(amp, c_amounts)\n    let s = x_c_amount\n    let c = JSBI.divide(JSBI.multiply(d, d), x_c_amount)\n    for (let i = 0; i < n; i++) {\n      if (i !== in_token_i && i !== out_token_i) {\n        s = JSBI.add(s, c_amounts[i])\n        c = JSBI.divide(JSBI.multiply(c, d), c_amounts[i])\n      }\n    }\n    c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(ann, nn))\n    const b = JSBI.add(JSBI.divide(d, ann), s)\n    let y_prev = ZERO\n    let y = d\n    for (let i = 0; i < 256; i++) {\n      y_prev = y\n      const y_numerator = JSBI.add(JSBI.exponentiate(y, TWO), c)\n      const y_denominator = JSBI.subtract(JSBI.add(JSBI.multiply(y, TWO), b), d)\n      y = JSBI.divide(y_numerator, y_denominator)\n      if (JSBI.lessThanOrEqual(abs(JSBI.subtract(y, y_prev)), ONE)) break\n    }\n    return y\n  }\n\n  private calc_d(amp: JSBI, c_amounts: JSBI[]): JSBI {\n    const n = c_amounts.length\n    const n_jsbi = JSBI.BigInt(n)\n    const nn = JSBI.exponentiate(n_jsbi, n_jsbi)\n    let sum_amounts = ZERO\n    for (const current_amount of c_amounts) {\n      sum_amounts = JSBI.add(sum_amounts, current_amount)\n    }\n    let d_prev = ZERO\n    let d = sum_amounts\n    for (let i = 0; i < 256; i++) {\n      let d_prod = d\n      for (let current_amount of c_amounts) {\n        d_prod = JSBI.divide(JSBI.multiply(d_prod, d), JSBI.multiply(current_amount, n_jsbi))\n      }\n      d_prev = d\n      const ann = JSBI.multiply(amp, nn)\n      const numerator = JSBI.multiply(d_prev, JSBI.add(JSBI.multiply(d_prod, n_jsbi), JSBI.multiply(ann, sum_amounts)))\n      const denominator = JSBI.add(\n        JSBI.multiply(d_prev, JSBI.subtract(ann, ONE)),\n        JSBI.multiply(d_prod, JSBI.add(n_jsbi, ONE))\n      )\n      d = JSBI.divide(numerator, denominator)\n      if (JSBI.lessThanOrEqual(abs(JSBI.subtract(d, d_prev)), ONE)) break\n    }\n    return d\n  }\n\n  private normalized_trade_fee(n: number, amount: JSBI): JSBI {\n    const trade_fee = JSBI.toNumber(JSBI.subtract(this.swapFeeDivisor, this.swapFeeCoefficient))\n    const adjusted_trade_fee = JSBI.BigInt(Math.floor((trade_fee * n) / (4 * (n - 1))))\n    return JSBI.divide(JSBI.multiply(amount, adjusted_trade_fee), this.swapFeeDivisor)\n  }\n}\n","import { TradeType, ZERO, ZERO_ADDRESS } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, CAVAX, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const chainId = trade.chainId\n    const etherIn = trade.inputAmount.currency === CAVAX[chainId]\n    const etherOut = trade.outputAmount.currency === CAVAX[chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const feeToDaaS: string = validateAndParseAddress(trade.feeTo)\n    const isDaaS = Boolean(feeToDaaS !== ZERO_ADDRESS && !trade.fee.equalTo(ZERO))\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer\n            ? 'swapExactAVAXForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactAVAXForTokens'\n          args = isDaaS ? [amountOut, path, to, deadline, feeToDaaS] : [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForAVAXSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForAVAX'\n          args = isDaaS\n            ? [amountIn, amountOut, path, to, deadline, feeToDaaS]\n            : [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          args = isDaaS\n            ? [amountIn, amountOut, path, to, deadline, feeToDaaS]\n            : [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapAVAXForExactTokens'\n          args = isDaaS ? [amountOut, path, to, deadline, feeToDaaS] : [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactAVAX'\n          args = isDaaS\n            ? [amountOut, amountIn, path, to, deadline, feeToDaaS]\n            : [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          args = isDaaS\n            ? [amountOut, amountIn, path, to, deadline, feeToDaaS]\n            : [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pools'\nimport IPangolinPair from '@pangolindex/exchange-contracts/artifacts/contracts/pangolin-core/PangolinPair.sol/PangolinPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './chains'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId = ChainId.AVALANCHE,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, tokenA.chainId)\n    const [reserves0, reserves1] = await new Contract(address, IPangolinPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), tokenA.chainId)\n  }\n}\n"],"names":["ChainId","StakingType","AirdropType","ChefType","ETHEREUM_MAINNET","id","chain_id","name","symbol","mainnet","evm","logo","pangolin_is_live","tracked_by_debank","supported_by_gelato","rpc_uri","coingecko_id","nativeCurrency","decimals","blockExplorerUrls","ARBITRUM_MAINNET","ARBITRUM_RINKEBY","AURORA_MAINNET","AURORA_TESTNET","AVALANCHE_MAINNET","png_symbol","subgraph","exchange","debank_pangolin_id","contracts","png","factory","router","router_daas","wrapped_native_token","local_multisig","community_treasury","treasury_vester","mini_chef","address","active","type","MINI_CHEF_V2","airdrop","LEGACY","timelock","governor","migrator","multicall","staking","reward_token","AVALANCHE_FUJI","revenue_distributor","fee_collector","BOBA_MAINNET","BITTORRENT_MAINNET","BITTORRENT_TESTNET","BSC_MAINNET","BSC_TESTNET","CELO_MAINNET","CELO_ALFAJORES_TESTNET","CELO_BAKLAVA_TESTNET","CRONOS_MAINNET","CRONOS_TESTNET","COSTON_TESTNET","PANGO_CHEF","MERKLE_TO_STAKING","SAR_POSITIONS","EVMOS_TESTNET","EVMOS_MAINNET","FANTOM_MAINNET","FANTOM_TESTNET","FUSE_MAINNET","FUSE_TESTNET","HARMONY_MAINNET","HARMONY_TESTNET","HECO_MAINNET","HECO_TESTNET","KLAYTN_MAINNET","KLAYTN_BAOBAB","METIS_MAINNET","METIS_RINKEBY","MOONRIVER_MAINNET","MOONBEAM_MAINNET","MOONBEAM_MOONBASE","NEAR_MAINNET","NEAR_CHEF","NEAR_AIRDROP","NEAR_TESTNET","OEC_MAINNET","OEC_TESTNET","OP_MAINNET","OP_KOVAN","POLYGON_MAINNET","POLYGON_MUMBAI","foundation_multisig","joint_multisig","SONGBIRD_CANARY","FLARE_MAINNET","WAGMI_FUJI_SUBNET","XDAI_MAINNET","EWC_MAINNET","EWC_TESTNET","IOTEX_MAINNET","IOTEX_TESTNET","ASTAR_MAINNET","SHIDEN_MAINNET","SHIBUYA_TESTNET","TELOS_MAINNET","TELOS_TESTNET","OASIS_MAINNET","OASIS_TESTNET","GODWOKEN_MAINNET","GODWOKEN_TESTNET","CHAINS","FUJI","AVALANCHE","WAGMI","COSTON","SONGBIRD","ALL_CHAINS","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO_ADDRESS","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_998","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","MethodNotSupported","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","abs","multiply","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","CAVAX","CURRENCY","Token","chainId","shouldValidateAddress","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WAVAX","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pools","entries","i","pool","priceOf","path","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","Route","input","output","hops","every","tokenCount","involvesToken","wrappedInput","wrappedOutput","inputToken","outputToken","midPrice","_100_PERCENT","Percent","ZERO_PERCENT","computePriceImpact","inputAmount","outputAmount","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","fee","feeTo","amounts","Array","nextPools","fullOutputAmount","EXACT_INPUT","getOutputAmount","nextPool","userReceivedAmountOut","fullOutputQuantity","getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","daasOptions","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPools","currentHops","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenIn","tokenOut","reserves","some","reserve","concat","poolTokens","tokens","tokenHop","poolsExcludingThisPool","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","Pool","liquidityToken","tokenAmounts","addresses","map","tokenAmount","indexOf","index","tokenIndex","findIndex","reserveOfIndex","reserveOfToken","baseToken","quoteToken","Pair","tokenA","tokenB","getCreate2Address","keccak256","pack","tokenAmountA","tokenAmountB","includes","reserve0","reserve1","inputReserve","outputReserve","token0","token1","inputAmountWithFee","swapFeeCoefficient","swapFeeDivisor","getLiquidityMinted","totalSupply","depositTokenAmounts","liquidity","amount0","amount1","getLiquidityValues","options","totalSupplyAdjusted","feeOn","kLast","kLastParsed","rootK","rootKLast","feeLiquidity","TARGET_DECIMAL","MIN_RESERVE","Vault","amp","join","amount_to_c_amount","decimalsBI","factor","c_amount_to_amount","c_amount","in_token_i","out_token_i","c_amounts","reserves_c","calc_y","dy","outputAmountWithFee","newTokenAmounts","newOutputTokenReserve_c","_outputToken","_inputToken","deposit_c_amounts","deposit","d_0","calc_d","n","old_c_amounts","new_c_amounts","d_1","ideal_balance","difference","normalized_trade_fee","d_2","mint_shares","shares","liquidityTokenValues","amount_c","remaining_amount_c","getLiquidityValuesByTokens","withdrawTokenAmounts","removed_c_amounts","withdrawal","pool_token_supply","token_num","burn_shares","x_c_amount","n_jsbi","nn","ann","d","s","c","y_prev","y_numerator","y_denominator","sum_amounts","current_amount","d_prev","d_prod","trade_fee","toNumber","adjusted_trade_fee","Math","floor","toHex","ZERO_HEX","Router","swapCallParameters","trade","etherIn","etherOut","ttl","feeToDaaS","isDaaS","Boolean","to","recipient","allowedSlippage","deadline","Date","getTime","useFeeOnTransfer","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IPangolinPair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}